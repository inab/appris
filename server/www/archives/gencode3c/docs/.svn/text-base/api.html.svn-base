<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb">
<head>
	<title>APPRIS: Selecting Principal Alternative Isoforms</title>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" name="APPRIS: Selecting Principal Alternative Isoforms"/>		
<!--
	$Id$
	docs/docs.html
	Author: Jose Manuel Rodriguez Carrasco
	Institutions:
		*	Spanish National Cancer Research Institute (CNIO, http://www.cnio.es/)
		*	Spanish National Bioinformatics Institute (INB, http://www.inab.org/)
-->
	<link rel="icon" type="image/x-icon" href="../img/APPRIS-favicon.ico.png"/>
	<link rel="stylesheet" type="text/css" href="../css/style.css"/>
	<link rel="stylesheet" type="text/css" href="../css/docs.css"/>

	<script type="text/javascript" src="../js/browserDetect.js"></script>
	<script type="text/javascript" src="../js/jquery-1.4.2.min.js"></script>	
	<script type="text/javascript" src="../js/sarissa/sarissa.js"></script>
	<script type="text/javascript" src="../js/sarissa/sarissa_ieemu_xpath.js"></script>
	<script type="text/javascript" src="../js/appris/APPRIS.js"></script>
	<script type="text/javascript" src="../js/appris/search.js"></script>

	<script type="text/javascript">
		// Check browser
		checkBrowser();

		// Init objects
		$(document).ready(function() {
			$('#content_release').html(APPRIS.RELEASE);
			$('#content_panel .content_leftcol .sidebar').html(APPRIS.DOC_MENU);
			$('#search_frame_input').keyup(searchEntity3);
			$('#search_frame_image').click(searchEntity3);
		});
	</script>
</head>

<body>

<div id="top_panel">
	<div id="logo_frame" onclick="javascript: window.location='http://appris.bioinfo.cnio.es'"></div>
	<div id="search_frame">
		<div id="search_frame_launch">
			Search gene/transcript:
			<input id="search_frame_input" type="text" />
			<div id="search_frame_image"></div>
		</div>
	</div>
</div> <!-- div#top_panel -->

<div id="menu_panel">
	<div id="menu_frame">
		<a href="../appris.html">Home</a>
		> <a href="docs.html">Help & Docs</a> > Perl API Doc		
	</div>
	<div id="info_frame">
		<a title="BioMart" href="http://appris.bioinfo.cnio.es/biomart/martview/" target='_blank'>BioMart</a>
		| <a title="Help" href="docs.html">Help & Docs</a>
		| <a title="Contact" href="contact.html" >Contact</a>
	</div>
</div> <!-- div#menu_panel -->

<div id="header_panel">
	<div id="logo_panel">
		<span class='logo_title'>Perl API Documentation</span>
	</div>
</div> <!-- div#header_panel -->

<div id="center_panel">
<div id="content_panel">
	<div class="content_leftcol">
		<div class="sidebar"></div> <!-- div#sidebar -->
		<div id="content_release"></div><!-- div#content_release -->		
	</div> <!-- div#content_leftcol -->
	
	<div class="content_rightcol">
		<div class="content_body">
		<br />
		<p>
			APPRIS uses <a class='content_external_ref' target='_blank' href='http://www.mysql.com/'>MySQL</a> relational
			databases to store its information. A comprehensive set of Application Programming Interfaces (APIs) serve as 
			a middle-layer between underlying database schemes.
			The APIs aim to encapsulate the database layout by providing efficient high-level access to data tables 
			and isolate applications from data layout changes.
		</p>
		<p>			
			APPRIS's API is written in <a class='content_external_ref' target='_blank' href='http://www.perl.org/'>Perl</a>.
			<img align="right" src='../img/MySQL-logo.png'/>
			<img align="right" src='../img/powered_by_perl.gif'/>
		</p>
		<p>
			This <a class='content_external_ref' target='_blank' href='apprislib/index.html'>API documentation</a> is 
			automatically generated from POD within the modules by Pdoc.
		</p>
		<div class="content_subtitle">Perl API Installation</div> <!-- Perl API Installation -->
		<p>
			There are two ways of installing the Perl API. You can check it out using 
			<a class='content_external_ref' target='_blank' href='https://github.com'>GitHub</a> 
			(Secure source code hosting and collaborative development), or you can download the files 
			in gzipped TAR format from either our website.
		</p>

		<ol>

			<p>
			<li>Create an installation directory:</li>
			<pre class='code'>
$ cd
$ mkdir appris_rel3c
$ cd appris_rel3c</pre>			
			</p>

			<p>
			<li>Download the API packages:
				<p>From our website:
					<pre class='code'>
<a href='../data/appris.perl-api.rel3c.v28.tar.gz'>http://appris.bioinfo.cnio.es/archives/gencode3c/data/appris.perl-api.rel3c.v28.tar.gz</a></pre>				
				</p>
				<p>Or from <a class='content_external_ref' target='_blank' href='https://github.com'>GitHub</a>:
					<pre class='code'>
<a href='https://github.com/josemrc/appris_rel3c'>https://github.com/josemrc/appris_rel3c</a></pre>
				</p>
			</li>
			</p>

			<p>
			<li>Download required packages using <a class='content_external_ref' target='_blank' href='http://search.cpan.org'>CPAN</a>:</li>
			<pre class='code'>
Bio::Seq
Bio::SeqIO
Exporter
FindBin
Config::IniFiles
Time::localtime
File::Basename
Getopt::Long
Data::Dumper
DBI
DBD::mysql
Bio::EnsEMBL::Registry (see http://www.ensembl.org/ documentation)</pre>			
			</p>

			<p>
			<li>Set up your environment:</li>
				<p>You have to tell Perl where to find the modules you just installed. The best way to do this is 
				adding the modules into PERL5LIB environment variable.					
				</p>
				<p>Under 'bash', 'ksh', or any 'sh-derived' shell:</p>
					<pre class='code'>
APPRIS_LIB='path of APPRIS's API'
PERL5LIB=${PERL5LIB}:${APPRIS_LIB}
export PERL5LIB</pre>
				<p>Under 'csh' or 'tcsh':</p>
					<pre class='code'>
setenv PERL5LIB ${PERL5LIB}:'path of APPRIS's API'</pre>
			</p>

			<p>
			<li>APPRIS's database dump:</li>
				<p>Entire MySQL database can be downloaded from our site in gzipped TAR format. See next section to
				know how to install the APPRIS data.					
				</p>
			</p>

		</ol>			

		<div class="content_subtitle">Installing APPRIS Data</div> <!-- Installing APPRIS Data -->
		<ol>
			<p>
			<li>Entire MySQL database can be downloaded from our site in gzipped TAR format:</li>
			<pre class='code'>
<a href='../data/mysql/appris.cexonic.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz'>http://appris.bioinfo.cnio.es/archives/gencode3c/data/mysql/appris.cexonic.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz</a>
<a href='../data/mysql/appris.corsair.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz'>http://appris.bioinfo.cnio.es/archives/gencode3c/data/mysql/appris.corsair.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz</a>
<a href='../data/mysql/appris.crash.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz'>http://appris.bioinfo.cnio.es/archives/gencode3c/data/mysql/appris.crash.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz</a>
<a href='../data/mysql/appris.entity.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz'>http://appris.bioinfo.cnio.es/archives/gencode3c/data/mysql/appris.entity.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz</a>
<a href='../data/mysql/appris.firestar.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz'>http://appris.bioinfo.cnio.es/archives/gencode3c/data/mysql/appris.firestar.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz</a>
<a href='../data/mysql/appris.inertia.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz'>http://appris.bioinfo.cnio.es/archives/gencode3c/data/mysql/appris.inertia.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz</a>
<a href='../data/mysql/appris.matador3d.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz'>http://appris.bioinfo.cnio.es/archives/gencode3c/data/mysql/appris.matador3d.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz</a>
<a href='../data/mysql/appris.pi.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz'>http://appris.bioinfo.cnio.es/archives/gencode3c/data/mysql/appris.pi.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz</a>
<a href='../data/mysql/appris.spade.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz'>http://appris.bioinfo.cnio.es/archives/gencode3c/data/mysql/appris.spade.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz</a>
<a href='../data/mysql/appris.thump.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz'>http://appris.bioinfo.cnio.es/archives/gencode3c/data/mysql/appris.thump.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz</a></pre>			
			</p>		

			<p>
			<li>Create APPRIS database:</li>
			<pre class='code'>
mysqladmin -h ${HOST} -u ${USER} -p${PWD} create ${DATABASE}</pre>			
			</p>		

			<p>
			<li>Import entity tables:</li>
			<pre class='code'>
gunzip < appris.entity.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz | mysql ${DATABASE} -h ${HOST} -u ${USER} -p${PWD}</pre>			
			</p>		

			<p>
			<li>Import the rest of tables:</li>
			<pre class='code'>
gunzip < appris.firestar.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz | mysql ${DATABASE} -h ${HOST} -u ${USER} -p${PWD}
gunzip < appris.matador3d.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz | mysql ${DATABASE} -h ${HOST} -u ${USER} -p${PWD}
gunzip < appris.spade.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz | mysql ${DATABASE} -h ${HOST} -u ${USER} -p${PWD}		
gunzip < appris.inertia.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz | mysql ${DATABASE} -h ${HOST} -u ${USER} -p${PWD}
gunzip < appris.crash.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz | mysql ${DATABASE} -h ${HOST} -u ${USER} -p${PWD}
gunzip < appris.thump.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz | mysql ${DATABASE} -h ${HOST} -u ${USER} -p${PWD}
gunzip < appris.cexonic.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz | mysql ${DATABASE} -h ${HOST} -u ${USER} -p${PWD}
gunzip < appris.corsair.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz | mysql ${DATABASE} -h ${HOST} -u ${USER} -p${PWD}
gunzip < appris.pi.homo_sapiens_encode_3c_dev.21Jun2011.v28.dump.gz | mysql ${DATABASE} -h ${HOST} -u ${USER} -p${PWD}</pre>
			</p>		

		</ol>	
				

		<div class="content_subtitle">API Documentation</div> <!-- API Documentation -->
		<p>
			The APPRIS's API has a code documentation in the form of standard Perl POD (Plain Old Documentation).
			This is documentation is mixed in with the actual code, but can be automatically extracted and formatted 
			using some software tools. For example the following command will bring up some documentation about the 
			module analysis of APPRIS class and each of its methods:
			<pre class='code'>perldoc APPRIS::Analysis::APPRIS</pre>
		</p>
		<p>Also, a web version is available on the 
		<a class='content_external_ref' target='_blank' href='apprislib/index.html'>Pdoc Perl documentation</a>
		</p>

		<h4>Connecting to the Database - The Registry</h4> 
		
		<p>
			All data used and created by APPRIS is stored in MySQL relational databases. If you want to access 
			this database the first thing you have to do is to connect to it. For that, you will need to know some things:			
		</p>
		<pre class='code'>
db_host_name - the name of the host where the APPRIS database lives
db_name      - the name of APPRIS database
db_user      - the user name used to access the database
db_user_pwd  - the password of user used to access the database
db_port      - the port to access the database</pre>

		<p>
			First, we need a connection to an APPRIS database through the Registry module that has been imported. 
			There are several ways to connect to APPRIS database. Almost every APPRIS script that you will write 
			will contain a use statement like the following:			
		</p>

		<ol>			
			<p>
			<li>We've made a connection to an APPRIS Registry and passed parameters using the -attribute => 'somevalue' syntax:</li>
			<pre class='code'>
use APPRIS::Registry;

my $registry = APPRIS::Registry->new(
	-dbhost  => 'db_host_name',
	-dbname  => 'db_name',
	-dbuser  => 'db_user',
	-dbpass  => 'db_user_pwd',
	-dbport  => 'db_port',
);</pre>			
			</p>		

			<p>
			<li>We passed the parameters of connection (-attribute => 'somevalue' syntax) using the 'load_registry_from_db' method 
of APPRIS Registry module:</li>
			<pre class='code'>
use APPRIS::Registry;

my $registry = APPRIS::Registry->new();
$registry->load_registry_from_db(
	-dbhost  => 'db_host_name',
	-dbname  => 'db_name',
	-dbuser  => 'db_user',
	-dbpass  => 'db_user_pwd',
	-dbport  => 'db_port',
);</pre>			
			</p>		

			<p>
			<li><a class='content_external_ref' target='_blank' href='http://config-inifiles.sourceforge.net'>Config::IniFiles</a> 
			module provides a way to have readable configuration files (INI) outside your Perl script. INI files consist 
			of a number of sections, each preceded with the section name in square brackets, followed by parameter names 
			and their values. Configuration of APPRIS database can be accessed from a tied hash:</li>
			<pre class='code'>
[ENCODE_DB]
  host=db_host_name
  db=db_name
  user=db_user
  pass=db_user_pwd
  port=db_port</pre>
			<p>We passed the parameters of connection using the Config INI file and 'load_registry_from_ini' 
			method of APPRIS Registry module:</p>
			<pre class='code'>
use APPRIS::Registry;

my $registry = APPRIS::Registry->new();
$registry->load_registry_from_ini(
	-file  => '/path/configfile.ini'
);</pre>			

			</p>		

		</ol>

		<p>In addition to the parameters provided above the optional 'dbport' and 'dbpass' parameters can be used specify the 
TCP port to connect via and the password to use respectively. These values have sensible defaults and can often be omitted.
		</p>

		<h4>Perl script samples</h4>
		
		<p>The APPRIS API allows manipulation of the database data through various objects. For example, some of the more heavily used 
objects are the Gene, Transcript and Translation objects.These objects are retrieved and stored in the database through the 
use of classes. Here we show you some useful samples how to use the APPRIS API:
		</p>			

		<ul>			
			<p>
			<li>Retrieve a list reference of gene objects:</li>
			<pre class='code'>
use APPRIS::Registry;

my $registry = APPRIS::Registry->new(
	-dbhost  => 'db_host_name',
	-dbname  => 'db_name',
	-dbuser  => 'db_user',
	-dbpass  => 'db_user_pwd',
	-dbport  => 'db_port',
);

my $chromosome = $registry->fetch_by_region('M');	
foreach my $gene (@{$chromosome}) {
	print "gene_id: ". $gene->stable_id ." source: ".$gene->source." external: ".$gene->external_name."\n";
}</pre>			
			</p>

			<p>
			<li>Another useful way to obtain information with respect to a gene:</li>
			<pre class='code'>
my $gene = $registry->fetch_by_gene_stable_id('ENSG00000135541');
print("gene start:end:strand is "
		. join( ":", map { $gene->$_ } qw(start end strand) )
		. "\n" );</pre>			
			</p>

			<p>
			<li>Retrieve a transcript and translate object from given transcript id:</li>
			<pre class='code'>
my $transcript = $registry->fetch_by_transc_stable_id('ENST00000367800');  
print "\nTranscript ENST00000367800:\n".
		"* stable_id: ".$transcript->stable_id."\n".
		"* sequence:\n".$transcript->sequence."\n".
		"* pep. sequence:\n".$transcript->translation->sequence."\n";


my $translation = $registry->fetch_by_transl_stable_id('ENST00000367800');
print "\nTranslate ENST00000367800:\n".
	"* stable_id: ".$translation->stable_id."\n* pep. sequence:\n".$translation->sequence."\n";</pre>			
			</p>

			<p>
			<li>Retrieve CDS positions:</li>
			<pre class='code'>
use APPRIS::Registry;

my $registry = APPRIS::Registry->new(
	-dbhost  => 'db_host_name',
	-dbname  => 'db_name',
	-dbuser  => 'db_user',
	-dbpass  => 'db_user_pwd',
	-dbport  => 'db_port',
);

my $chromosome = $registry->fetch_basic_by_region('M');
foreach my $gene (@{$chromosome}) {
	foreach my $transcript (@{$gene->transcripts}) {			
			
		if ($transcript->translate and $transcript->exons) {
			my ($exons) = $transcript->exons;
			my ($translate) = $transcript->translate;
			for(my $icds=0;$icds<scalar(@{$translate->cds});$icds++) {
				my ($cds) = $translate->cds->[$icds];
				my ($exon) = $exons->[$icds];

				print	"gene_id: ". $gene->stable_id .
						"transcript_id: ". $transcript->stable_id .
						"exon_id: ". $exon->stable_id .
						" cds_start: ".$cds->start .
						" cds_end: ".$cds->end .
						" cds_strand: ".$cds->strand."\n";
			}
		}
	}
}</pre>			
			</p>

		</ul>		

		<p>
			These and other useful scripts can be found on the following sites:
		</p>
		<ul>
			<li><a class='content_external_ref' target='_blank' href='../data/samples/sample.txt'>sample.pl</a> - prints useful information of a gene/transcript/peptide</li>
			<li><a class='content_external_ref' target='_blank' href='../data/samples/sample2.txt'>sample2.pl</a> - prints CDS positions from a genomic region</li>
		</ul>			
		
						
		</div> <!-- div#content_body -->	
	</div>	<!-- div#content_rightcol -->

</div> <!-- div#content_panel -->			
</div> <!-- div#center_panel -->
</body>
</html>
