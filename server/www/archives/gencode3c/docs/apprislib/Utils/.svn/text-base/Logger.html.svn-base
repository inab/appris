<head>
<!-- Generated by perlmod2www.pl -->
<title>
Logger documentation.
</title>
<link rel="stylesheet" type="text/css" href="../perl.css">
</head>
<body bgcolor="white">
<span id="modRootPath">APPRIS::Utils</span>
<span id="modName">Logger</span>
<div id="sep"></div>
<a name="TOP" id="TOP"></a>
<table id="daArea" width="100%"><tr><td id="daEntry" ><a href="#SUMMARY">Summary</a></td><td id="daEntry" ><a href="#vardefs">Package variables</a></td><td id="daEntry" ><a href="#SYNOPSIS">Synopsis</a></td><td id="daEntry" ><a href="#DESCRIPTION">Description</a></td><td id="daEntry" ><a href="#General">General documentation</a></td><td id="daEntry" ><a href="#Methods">Methods</a></td></tr></table>
<div id="sep"></div>
<div id="descTitle">Summary</div>
<div id="descArea"><B>APPRIS::Utils::Logger</B> - Utility module for helper functions</div>
<div id="sep"></div>
<a name="vardefs" id="vardefs"></a><div id="descTitle">Package variables</div>
<div id="descArea"><div id="libEntry"><div id="descSubTitle">Privates (from <b>"my"</b> definitions)</div>
</div>
<div id="libEntry"><span id="var">%level_defs</span> = <span id="braces">(</span>  <span id="sqStr">'none'</span>      =&gt; 1,  <span id="sqStr">'error'</span>     =&gt; 2,  <span id="sqStr">'warning'</span>   =&gt; 3,  <span id="sqStr">'info'</span>      =&gt; 4,  <span id="sqStr">'debug'</span>     =&gt; 5,<span id="braces">)</span></div>
<div id="libEntry"><span id="var">@reverse_level_defs</span> = <span id="braces">(</span><span id="perlFunc">undef</span>, <span id="perlFunc">qw</span><span id="braces">(</span>none error warning info debug<span id="braces">)</span><span id="braces">)</span></div>
</div>
<div id="sep"></div>
<div id="descTitle">Included modules</div>
<div id="descArea"><div id="libEntry"><span id="use"><a href="Argument.html">APPRIS::Utils::Argument</a></span> qw ( rearrange ) </div>
<div id="libEntry"><span id="use"><a href="Exception.html">APPRIS::Utils::Exception</a></span> qw ( throw ) </div>
<div id="libEntry"><span id="use"><a href="ScriptUtils.html">APPRIS::Utils::ScriptUtils</a></span> qw ( parse_bytes ) </div>
<div id="libEntry"><span id="use">FindBin</span> qw ( $Bin $Script ) </div>
<div id="libEntry"><span id="use">POSIX</span> qw ( strftime ) </div>
</div>
<div id="sep"></div>
<a name="SYNOPSIS" id="SYNOPSIS"></a>
<div id="descTitle">Synopsis</div>
<div id="descArea">
</div>
<div id="sep"></div>
<a name="DESCRIPTION" id="DESCRIPTION"></a>
<div id="descTitle">Description</div>
<div id="descArea">This module is a collection of common methods and does logging.
</div>
<div id="sep"></div>
<a name="Methods" id="Methods"></a>
<div id="descTitle">Methods</div>
<table id="methIndArea" width="100%" cellspacing="0"><tr><td id="methIndEntry">create_auto_logfile</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE1">Code</a></td></tr>
<tr><td id="methIndEntry">date</td><td id="methIndEntry"><a href="#POD1">Description</a></td><td id="methIndEntry"><a href="#CODE2">Code</a></td></tr>
<tr><td id="methIndEntry">date_and_mem</td><td id="methIndEntry"><a href="#POD2">Description</a></td><td id="methIndEntry"><a href="#CODE3">Code</a></td></tr>
<tr><td id="methIndEntry">debug</td><td id="methIndEntry"><a href="#POD3">Description</a></td><td id="methIndEntry"><a href="#CODE4">Code</a></td></tr>
<tr><td id="methIndEntry">error</td><td id="methIndEntry"><a href="#POD4">Description</a></td><td id="methIndEntry"><a href="#CODE5">Code</a></td></tr>
<tr><td id="methIndEntry">extract_log_identifier</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE6">Code</a></td></tr>
<tr><td id="methIndEntry">finish_log</td><td id="methIndEntry"><a href="#POD5">Description</a></td><td id="methIndEntry"><a href="#CODE7">Code</a></td></tr>
<tr><td id="methIndEntry">info</td><td id="methIndEntry"><a href="#POD6">Description</a></td><td id="methIndEntry"><a href="#CODE8">Code</a></td></tr>
<tr><td id="methIndEntry">init_log</td><td id="methIndEntry"><a href="#POD7">Description</a></td><td id="methIndEntry"><a href="#CODE9">Code</a></td></tr>
<tr><td id="methIndEntry">init_progress</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE10">Code</a></td></tr>
<tr><td id="methIndEntry">is_component</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE11">Code</a></td></tr>
<tr><td id="methIndEntry">log_auto_id</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE12">Code</a></td></tr>
<tr><td id="methIndEntry">log_filehandle</td><td id="methIndEntry"><a href="#POD8">Description</a></td><td id="methIndEntry"><a href="#CODE13">Code</a></td></tr>
<tr><td id="methIndEntry">log_generic</td><td id="methIndEntry"><a href="#POD9">Description</a></td><td id="methIndEntry"><a href="#CODE14">Code</a></td></tr>
<tr><td id="methIndEntry">log_progress</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE15">Code</a></td></tr>
<tr><td id="methIndEntry">log_progressbar</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE16">Code</a></td></tr>
<tr><td id="methIndEntry">logappend</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE17">Code</a></td></tr>
<tr><td id="methIndEntry">logauto</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE18">Code</a></td></tr>
<tr><td id="methIndEntry">logfile</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE19">Code</a></td></tr>
<tr><td id="methIndEntry">loglevel</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE20">Code</a></td></tr>
<tr><td id="methIndEntry">logpath</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE21">Code</a></td></tr>
<tr><td id="methIndEntry">mem</td><td id="methIndEntry"><a href="#POD10">Description</a></td><td id="methIndEntry"><a href="#CODE22">Code</a></td></tr>
<tr><td id="methIndEntry">new</td><td id="methIndEntry"><a href="#POD11">Description</a></td><td id="methIndEntry"><a href="#CODE23">Code</a></td></tr>
<tr><td id="methIndEntry">runtime</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE24">Code</a></td></tr>
<tr><td id="methIndEntry">time_and_mem</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE25">Code</a></td></tr>
<tr><td id="methIndEntry">warning</td><td id="methIndEntry"><a href="#POD12">Description</a></td><td id="methIndEntry"><a href="#CODE26">Code</a></td></tr>
<tr><td id="methIndEntry">warning_count</td><td id="methIndEntry"><a href="#POD13">Description</a></td><td id="methIndEntry"><a href="#CODE27">Code</a></td></tr>
</table>
<div id="sep"></div>
<a name="MethDesc" id="MethDesc"></a>
<div id="mainTitle">Methods description</div>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_date" id="_pod_date"></a><a name="POD1" id="POD1"></a>date</td><td ><a href="#CODE2">code</a></td><td >&nbsp;&nbsp;&nbsp;&nbsp;</td><td ><a href="#POD2">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Example     : print "Date: " . $support->date . "\n";
  Description : Prints a nicely formatted timestamp (YYYY-DD-MM hh:mm:ss)
  Return type : String - the timestamp
  Exceptions  : none
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_date_and_mem" id="_pod_date_and_mem"></a><a name="POD2" id="POD2"></a>date_and_mem</td><td ><a href="#CODE3">code</a></td><td ><a href="#POD1">prev</a></td><td ><a href="#POD3">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Example     : print LOG "Time, memory usage: ".$support->date_and_mem."\n";
  Description : Prints a timestamp and the memory usage of your script.
  Return type : String - timestamp and memory usage
  Exceptions  : none
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_debug" id="_pod_debug"></a><a name="POD3" id="POD3"></a>debug</td><td ><a href="#CODE4">code</a></td><td ><a href="#POD2">prev</a></td><td ><a href="#POD4">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Arg[1]      : String $txt - the warning text to log
  Arg[2]      : Int $indent - indentation level for log message
  Example     : my $log = $support->log_filehandle;
                $support->debug('Log this verbose message.\n', 1);
  Description : Logs a message via $self->log
  Return type : TRUE on success, FALSE if not verbose
  Exceptions  : none
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_error" id="_pod_error"></a><a name="POD4" id="POD4"></a>error</td><td ><a href="#CODE5">code</a></td><td ><a href="#POD3">prev</a></td><td ><a href="#POD5">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Arg[1]      : String $txt - the error text to log
  Arg[2]      : Int $indent - indentation level for log message
  Example     : my $log = $support->log_filehandle;
                $support->error('Log foo.\n', 1);
  Description : Logs a message via $self->log and exits the script.
  Return type : none
  Exceptions  : none
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_finish_log" id="_pod_finish_log"></a><a name="POD5" id="POD5"></a>finish_log</td><td ><a href="#CODE7">code</a></td><td ><a href="#POD4">prev</a></td><td ><a href="#POD6">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Example     : $support->finish_log;
  Description : Writes footer information to a logfile. This includes the
                number of logged warnings, timestamp and memory footprint.
  Return type : TRUE on success
  Exceptions  : none
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_info" id="_pod_info"></a><a name="POD6" id="POD6"></a>info</td><td ><a href="#CODE8">code</a></td><td ><a href="#POD5">prev</a></td><td ><a href="#POD7">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Arg[1]      : String $txt - the warning text to log
  Arg[2]      : Int $indent - indentation level for log message
  Example     : my $log = $support->log_filehandle;
                $support->info('Log this verbose message.\n', 1);
  Description : Logs a message via $self->log
  Return type : true on success
  Exceptions  : none
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_init_log" id="_pod_init_log"></a><a name="POD7" id="POD7"></a>init_log</td><td ><a href="#CODE9">code</a></td><td ><a href="#POD6">prev</a></td><td ><a href="#POD8">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Example     : $support->init_log;
  Description : Opens a filehandle to the logfile and prints some header
                information to this file. This includes script name, date, user
                running the script and parameters the script will be running
                with.
  Return type : Filehandle - the log filehandle
  Exceptions  : none
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_log_filehandle" id="_pod_log_filehandle"></a><a name="POD8" id="POD8"></a>log_filehandle</td><td ><a href="#CODE13">code</a></td><td ><a href="#POD7">prev</a></td><td ><a href="#POD9">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Arg[1]      : (optional) String $mode - file access mode
  Example     : my $log = $support->log_filehandle;
                # print to the filehandle
                print $log 'Lets start logging...\n';
                # log via the wrapper $self->log()
                $support->log('Another log message.\n');
  Description : Returns a filehandle for logging (STDERR by default, logfile if
                set from config or commandline). You can use the filehandle
                directly to print to, or use the smart wrapper $self->log().
                Logging mode (truncate or append) can be set by passing the
                mode as an argument to log_filehandle(), or with the
                --logappend commandline option (default: truncate)
  Return type : Filehandle - the filehandle to log to
  Exceptions  : thrown if logfile can't be opened
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_log_generic" id="_pod_log_generic"></a><a name="POD9" id="POD9"></a>log_generic</td><td ><a href="#CODE14">code</a></td><td ><a href="#POD8">prev</a></td><td ><a href="#POD10">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Arg[1]      : String $txt - the text to log
  Arg[2]      : Int $indent - indentation level for log message
  Example     : my $log = $support->log_filehandle;
                $support->log('Log foo.\n', 1);
  Description : Logs a message to the filehandle initialised by calling
                $self->log_filehandle(). You can supply an indentation level
                to get nice hierarchical log messages.
  Return type : true on success
  Exceptions  : thrown when no filehandle can be obtained
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_mem" id="_pod_mem"></a><a name="POD10" id="POD10"></a>mem</td><td ><a href="#CODE22">code</a></td><td ><a href="#POD9">prev</a></td><td ><a href="#POD11">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Example     : print "Memory usage: " . $support->mem . "\n";
  Description : Prints the memory used by your script. Not sure about platform
                dependence of this call ...
  Return type : String - memory usage
  Exceptions  : none
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_new" id="_pod_new"></a><a name="POD11" id="POD11"></a>new</td><td ><a href="#CODE23">code</a></td><td ><a href="#POD10">prev</a></td><td ><a href="#POD12">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Arg[1]      : String $serverroot - root directory of your ensembl sandbox
  Example     : my $support = new <B>APPRIS::Utils::Logger</B>(
                                        '/path/to/ensembl');
  Description : constructor
  Return type : <B>APPRIS::Utils::Logger</B> object
  Exceptions  : thrown on invalid loglevel
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_warning" id="_pod_warning"></a><a name="POD12" id="POD12"></a>warning</td><td ><a href="#CODE26">code</a></td><td ><a href="#POD11">prev</a></td><td ><a href="#POD13">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Arg[1]      : String $txt - the warning text to log
  Arg[2]      : Int $indent - indentation level for log message
  Example     : my $log = $support->log_filehandle;
                $support->warning('Log foo.\n', 1);
  Description : Logs a message via $self->log and increases the warning counter.
  Return type : true on success
  Exceptions  : none
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_warning_count" id="_pod_warning_count"></a><a name="POD13" id="POD13"></a>warning_count</td><td ><a href="#CODE27">code</a></td><td ><a href="#POD12">prev</a></td><td ><a href="#POD14">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Example     : print LOG "There were ".$support->warnings." warnings.\n";
  Description : Returns the number of warnings encountered while running the
                script (the warning counter is increased by $self->log_warning).
  Return type : Int - number of warnings
  Exceptions  : none
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<a name="MethCode" id="MethCode"></a>
<div id="mainTitle">Methods code</div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE1" id="CODE1"></a>create_auto_logfile</td><td >description</td><td >prev</td><td ><a href="#CODE2">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">create_auto_logfile</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">my</span> <span id="var">$logautobase</span> = <span id="perlFunc">shift</span>;

  <span id="comment"># do nothing if automatic logfile generation isn't set</span><br />  <span id="perlKey">return</span> <span id="perlKey">unless</span> <span id="braces">(</span><span id="var">$self</span>-&gt;<span id="method">logauto</span><span id="braces">)</span>;

  <span id="comment"># an explicit logfile name overrides LOGAUTO</span><br />  <span id="perlKey">return</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$self</span>-&gt;<span id="method">logfile</span><span id="braces">)</span>;

  <span id="comment"># argument check</span><br />  <span id="perlKey">unless</span> <span id="braces">(</span><span id="var">$logautobase</span><span id="braces">)</span> <span id="braces">{</span>
    <span id="method">throw</span><span id="braces">(</span><span id="sqStr">'Need a base logfile name for auto-generating logfile.'</span><span id="braces">)</span>;
  <span id="braces">}</span>

  <span id="comment"># create a logfile name</span><br />  <span id="var">$self</span>-&gt;<span id="method">logfile</span><span id="braces">(</span><span id="dqStr">"${logautobase}_"</span>.<span id="var">$self</span>-&gt;<span id="method">log_auto_id</span>.<span id="dqStr">".log"</span><span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE2" id="CODE2"></a>date</td><td ><a href="#POD1">description</a></td><td ><a href="#CODE1">prev</a></td><td ><a href="#CODE3">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">date</span>
{<pre>  <span id="perlKey">return</span> strftime <span id="dqStr">"<span id="var">%Y</span>-<span id="var">%m</span>-<span id="var">%d</span> <span id="var">%T</span>"</span>, <span id="perlFunc">localtime</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE3" id="CODE3"></a>date_and_mem</td><td ><a href="#POD2">description</a></td><td ><a href="#CODE2">prev</a></td><td ><a href="#CODE4">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">date_and_mem</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$date</span> = strftime <span id="dqStr">"<span id="var">%Y</span>-<span id="var">%m</span>-<span id="var">%d</span> <span id="var">%T</span>"</span>, <span id="perlFunc">localtime</span>;
  <span id="perlKey">my</span> <span id="var">$mem</span> = `ps -p $$ -o vsz |tail -1`;
  <span id="perlFunc">chomp</span> <span id="var">$mem</span>;
  <span id="var">$mem</span> = <span id="method">parse_bytes</span><span id="braces">(</span><span id="var">$mem</span>*1000<span id="braces">)</span>;
  <span id="perlKey">return</span> <span id="dqStr">"[<span id="var">$date</span>, mem <span id="var">$mem</span>]"</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE4" id="CODE4"></a>debug</td><td ><a href="#POD3">description</a></td><td ><a href="#CODE3">prev</a></td><td ><a href="#CODE5">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">debug</span>
{<pre>  <span id="perlKey">my</span> <span id="braces">(</span><span id="var">$self</span>, <span id="var">$txt</span>, <span id="var">$indent</span>, <span id="var">$stamped</span><span id="braces">)</span> = <span id="var">@_</span>;

  <span id="perlKey">return</span><span id="braces">(</span>0<span id="braces">)</span> <span id="perlKey">unless</span> <span id="braces">(</span><span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'loglevel'</span><span id="braces">}</span> &gt;= 5<span id="braces">)</span>;

  <span id="var">$self</span>-&gt;<span id="method">log_generic</span><span id="braces">(</span><span id="var">$txt</span>, <span id="var">$indent</span>, <span id="var">$stamped</span><span id="braces">)</span>;
  <span id="perlKey">return</span><span id="braces">(</span>1<span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE5" id="CODE5"></a>error</td><td ><a href="#POD4">description</a></td><td ><a href="#CODE4">prev</a></td><td ><a href="#CODE6">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">error</span>
{<pre>  <span id="perlKey">my</span> <span id="braces">(</span><span id="var">$self</span>, <span id="var">$txt</span>, <span id="var">$indent</span>, <span id="var">$stamped</span><span id="braces">)</span> = <span id="var">@_</span>;

  <span id="perlKey">return</span><span id="braces">(</span>0<span id="braces">)</span> <span id="perlKey">unless</span> <span id="braces">(</span><span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'loglevel'</span><span id="braces">}</span> &gt;= 2<span id="braces">)</span>;
  
  <span id="var">$txt</span> = <span id="dqStr">"ERROR: "</span>.<span id="var">$txt</span>;
  <span id="var">$self</span>-&gt;<span id="method">log_generic</span><span id="braces">(</span><span id="var">$txt</span>, <span id="var">$indent</span>, <span id="var">$stamped</span><span id="braces">)</span>;
  
  <span id="var">$self</span>-&gt;<span id="method">log_generic</span><span id="braces">(</span><span id="dqStr">"\nExiting prematurely.\n\n"</span><span id="braces">)</span>;
  <span id="var">$self</span>-&gt;<span id="method">log_generic</span><span id="braces">(</span><span id="dqStr">"Runtime: "</span>.<span id="var">$self</span>-&gt;<span id="method">runtime</span>.<span id="dqStr">" "</span>.<span id="var">$self</span>-&gt;<span id="method">date_and_mem</span>.<span id="dqStr">"\n\n"</span><span id="braces">)</span>;
  
  <span id="perlKey">exit</span><span id="braces">(</span>1<span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE6" id="CODE6"></a>extract_log_identifier</td><td >description</td><td ><a href="#CODE5">prev</a></td><td ><a href="#CODE7">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">extract_log_identifier</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;

  <span id="perlKey">if</span> <span id="braces">(</span><span id="perlKey">my</span> <span id="var">$logfile</span> = <span id="var">$self</span>-&gt;<span id="method">logfile</span><span id="braces">)</span> <span id="braces">{</span>
    <span id="var">$logfile</span> =~ <span id="regExp">/.+\.([^\.]+)\.log/</span>;
    <span id="perlKey">return</span> <span id="var">$1</span>;
  <span id="braces">}</span> <span id="perlKey">else</span> <span id="braces">{</span>
    <span id="perlKey">return</span> <span id="perlFunc">undef</span>;
  <span id="braces">}</span></pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE7" id="CODE7"></a>finish_log</td><td ><a href="#POD5">description</a></td><td ><a href="#CODE6">prev</a></td><td ><a href="#CODE8">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">finish_log</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  
  <span id="var">$self</span>-&gt;<span id="method">info</span><span id="braces">(</span><span id="dqStr">"\nAll done for <span id="var">$Script</span>.\n"</span><span id="braces">)</span>;
  <span id="var">$self</span>-&gt;<span id="method">info</span><span id="braces">(</span><span id="var">$self</span>-&gt;<span id="method">warning_count</span>.<span id="dqStr">" warnings. "</span><span id="braces">)</span>;
  <span id="var">$self</span>-&gt;<span id="method">info</span><span id="braces">(</span><span id="dqStr">"Runtime: "</span>.<span id="var">$self</span>-&gt;<span id="method">runtime</span>.<span id="dqStr">" "</span>.<span id="var">$self</span>-&gt;<span id="method">date_and_mem</span>.<span id="dqStr">"\n\n"</span><span id="braces">)</span>;
  
  <span id="perlKey">return</span><span id="braces">(</span>1<span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE8" id="CODE8"></a>info</td><td ><a href="#POD6">description</a></td><td ><a href="#CODE7">prev</a></td><td ><a href="#CODE9">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">info</span>
{<pre>  <span id="perlKey">my</span> <span id="braces">(</span><span id="var">$self</span>, <span id="var">$txt</span>, <span id="var">$indent</span>, <span id="var">$stamped</span><span id="braces">)</span> = <span id="var">@_</span>;

  <span id="perlKey">return</span><span id="braces">(</span>0<span id="braces">)</span> <span id="perlKey">unless</span> <span id="braces">(</span><span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'loglevel'</span><span id="braces">}</span> &gt;= 4<span id="braces">)</span>;

  <span id="var">$self</span>-&gt;<span id="method">log_generic</span><span id="braces">(</span><span id="var">$txt</span>, <span id="var">$indent</span>, <span id="var">$stamped</span><span id="braces">)</span>;
  <span id="perlKey">return</span><span id="braces">(</span>1<span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE9" id="CODE9"></a>init_log</td><td ><a href="#POD7">description</a></td><td ><a href="#CODE8">prev</a></td><td ><a href="#CODE10">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">init_log</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">my</span> <span id="var">$params</span> = <span id="perlFunc">shift</span>;

  <span id="comment"># get a log filehandle</span><br />  <span id="perlKey">my</span> <span id="var">$log</span> = <span id="var">$self</span>-&gt;<span id="method">log_filehandle</span>;

  <span id="comment"># remember start time</span><br />  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_start_time'</span><span id="braces">}</span> = <span id="perlFunc">time</span>;

  <span id="comment"># don't log parameters if this script is run by another one</span><br />  <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$self</span>-&gt;<span id="method">logauto</span> or ! <span id="var">$self</span>-&gt;<span id="method">is_component</span><span id="braces">)</span> <span id="braces">{</span>
    <span id="comment"># print script name, date, user who is running it</span><br />    <span id="perlKey">my</span> <span id="var">$hostname</span> = `hostname`;
    <span id="perlFunc">chomp</span> <span id="var">$hostname</span>;
    <span id="perlKey">my</span> <span id="var">$script</span> = <span id="dqStr">"<span id="var">$hostname</span>:<span id="var">$Bin</span>/<span id="var">$Script</span>"</span>;
    <span id="perlKey">my</span> <span id="var">$user</span> = `whoami`;
    <span id="perlFunc">chomp</span> <span id="var">$user</span>;
    <span id="var">$self</span>-&gt;<span id="method">info</span><span id="braces">(</span><span id="dqStr">"Script: $script\nDate: "</span>.<span id="var">$self</span>-&gt;<span id="method">date</span>.<span id="dqStr">"\nUser: $user\n"</span><span id="braces">)</span>;

    <span id="comment"># print parameters the script is running with</span><br />    <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$params</span><span id="braces">)</span> <span id="braces">{</span>
      <span id="var">$self</span>-&gt;<span id="method">info</span><span id="braces">(</span><span id="dqStr">"Parameters:\n\n"</span><span id="braces">)</span>;
      <span id="var">$self</span>-&gt;<span id="method">info</span><span id="braces">(</span><span id="var">$params</span><span id="braces">)</span>;
    <span id="braces">}</span>
  <span id="braces">}</span>

  <span id="perlKey">return</span> <span id="var">$log</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE10" id="CODE10"></a>init_progress</td><td >description</td><td ><a href="#CODE9">prev</a></td><td ><a href="#CODE11">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">init_progress</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">my</span> <span id="var">$max</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">my</span> <span id="var">$num_bins</span> = <span id="perlFunc">shift</span> || 50;

  <span id="method">throw</span><span id="braces">(</span><span id="dqStr">"You must provide the maximum value for your progress bar"</span><span id="braces">)</span>
    <span id="perlKey">unless</span> <span id="braces">(</span><span id="perlFunc">defined</span><span id="braces">(</span><span id="var">$max</span><span id="braces">)</span><span id="braces">)</span>;

  <span id="comment"># auto-generate a unique name for your progressbar</span><br />  <span id="perlKey">my</span> <span id="var">$name</span> = <span id="perlFunc">time</span> . <span id="sqStr">'_'</span> . <span id="perlFunc">int</span><span id="braces">(</span><span id="perlFunc">rand</span><span id="braces">(</span>1000<span id="braces">)</span><span id="braces">)</span>;

  <span id="comment"># calculate bin size; we will use 50 bins (2% increments)</span><br />  <span id="perlKey">my</span> <span id="var">$binsize</span> = <span id="var">$max</span><span id="regExp">/</span><span id="var">$num_bins</span>;<br />
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'max_val'</span><span id="braces">}</span> = <span id="var">$max</span>;
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'binsize'</span><span id="braces">}</span> = <span id="var">$binsize</span>;
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'numbins'</span><span id="braces">}</span> = <span id="var">$num_bins</span>;
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'next'</span><span id="braces">}</span> = 0;
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'index'</span><span id="braces">}</span> = 0;

  <span id="perlKey">return</span> <span id="var">$name</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE11" id="CODE11"></a>is_component</td><td >description</td><td ><a href="#CODE10">prev</a></td><td ><a href="#CODE12">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">is_component</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_is_component'</span><span id="braces">}</span> = <span id="perlFunc">shift</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">@_</span><span id="braces">)</span>;
  <span id="perlKey">return</span> <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_is_component'</span><span id="braces">}</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE12" id="CODE12"></a>log_auto_id</td><td >description</td><td ><a href="#CODE11">prev</a></td><td ><a href="#CODE13">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">log_auto_id</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_log_auto_id'</span><span id="braces">}</span> = <span id="perlFunc">shift</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">@_</span><span id="braces">)</span>;
  <span id="perlKey">return</span> <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_log_auto_id'</span><span id="braces">}</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE13" id="CODE13"></a>log_filehandle</td><td ><a href="#POD8">description</a></td><td ><a href="#CODE12">prev</a></td><td ><a href="#CODE14">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">log_filehandle</span>
{<pre>  <span id="perlKey">my</span> <span id="braces">(</span><span id="var">$self</span>, <span id="var">$mode</span><span id="braces">)</span> = <span id="var">@_</span>;
  
  <span id="perlKey">unless</span> <span id="braces">(</span><span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_log_filehandle'</span><span id="braces">}</span><span id="braces">)</span> <span id="braces">{</span>
    <span id="var">$mode</span> ||= <span id="sqStr">'&gt;'</span>;
    <span id="var">$mode</span> = <span id="sqStr">'&gt;&gt;'</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$self</span>-&gt;<span id="method">logappend</span><span id="braces">)</span>;
    
    <span id="perlKey">my</span> <span id="var">$fh</span> =\* STDERR;
    
    <span id="perlKey">if</span> <span id="braces">(</span><span id="perlKey">my</span> <span id="var">$logfile</span> = <span id="var">$self</span>-&gt;<span id="method">logfile</span><span id="braces">)</span> <span id="braces">{</span>
      <span id="perlKey">if</span> <span id="braces">(</span><span id="perlKey">my</span> <span id="var">$logpath</span> = <span id="var">$self</span>-&gt;<span id="method">logpath</span><span id="braces">)</span> <span id="braces">{</span>
        <span id="perlKey">unless</span> <span id="braces">(</span>-e <span id="var">$logpath</span><span id="braces">)</span> <span id="braces">{</span>
          <span id="perlFunc">system</span><span id="braces">(</span><span id="dqStr">"mkdir -p <span id="var">$logpath</span>"</span><span id="braces">)</span> == 0 or
            <span id="method">throw</span><span id="braces">(</span><span id="dqStr">"Can't create log dir <span id="var">$logpath</span>: $!\n"</span><span id="braces">)</span>;
        <span id="braces">}</span>
        
        <span id="var">$logfile</span> = <span id="dqStr">"<span id="var">$logpath</span>/"</span>.<span id="var">$self</span>-&gt;<span id="method">logfile</span>;
      <span id="braces">}</span>
      
      <span id="perlFunc">open</span><span id="braces">(</span><span id="var">$fh</span>, <span id="dqStr">"<span id="var">$mode</span>"</span>, <span id="var">$logfile</span><span id="braces">)</span> or
        <span id="method">throw</span><span id="braces">(</span><span id="dqStr">"Unable to open <span id="var">$logfile</span> for writing: $!"</span><span id="braces">)</span>;
    <span id="braces">}</span>

    <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_log_filehandle'</span><span id="braces">}</span> = <span id="var">$fh</span>;
  <span id="braces">}</span>

  <span id="perlKey">return</span> <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_log_filehandle'</span><span id="braces">}</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE14" id="CODE14"></a>log_generic</td><td ><a href="#POD9">description</a></td><td ><a href="#CODE13">prev</a></td><td ><a href="#CODE15">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">log_generic</span>
{<pre>  <span id="perlKey">my</span> <span id="braces">(</span><span id="var">$self</span>, <span id="var">$txt</span>, <span id="var">$indent</span>, <span id="var">$stamped</span><span id="braces">)</span> = <span id="var">@_</span>;

  <span id="var">$indent</span> ||= 0;
  <span id="perlKey">my</span> <span id="var">$fh</span> = <span id="var">$self</span>-&gt;<span id="method">log_filehandle</span>;

  <span id="comment"># append timestamp and memory usage to log text if requested</span><br />  <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$stamped</span><span id="braces">)</span> <span id="braces">{</span>
    <span id="var">$txt</span> =~ <span id="regExp">s/^(\n*)(.*)(\n*)$/$2/</span>;
    <span id="var">$txt</span> = <span id="perlFunc">sprintf</span><span id="braces">(</span><span id="dqStr">"%-60s%20s"</span>, <span id="var">$txt</span>, <span id="var">$self</span>-&gt;<span id="method">time_and_mem</span><span id="braces">)</span>;
    <span id="var">$txt</span> = <span id="var">$1</span>.<span id="var">$txt</span>.<span id="var">$3</span>;
  <span id="braces">}</span>
  
  <span id="comment"># strip off leading linebreaks so that indenting doesn't break</span><br />  <span id="var">$txt</span> =~ <span id="regExp">s/^(\n*)//</span>;
  
  <span id="comment"># indent</span><br />  <span id="var">$txt</span> = <span id="var">$1</span>.<span id="dqStr">"  "</span>x<span id="var">$indent</span> . <span id="var">$txt</span>;
  
  <span id="perlFunc">print</span> <span id="var">$fh</span> <span id="dqStr">"<span id="var">$txt</span>"</span>;
  
  <span id="perlKey">return</span><span id="braces">(</span>1<span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE15" id="CODE15"></a>log_progress</td><td >description</td><td ><a href="#CODE14">prev</a></td><td ><a href="#CODE16">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">log_progress</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">my</span> <span id="var">$name</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">my</span> <span id="var">$curr</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">my</span> <span id="var">$indent</span> = <span id="perlFunc">shift</span>;
  
  <span id="method">throw</span><span id="braces">(</span><span id="dqStr">"You must provide a name and the current value for your progress bar"</span><span id="braces">)</span>
    <span id="perlKey">unless</span> <span id="braces">(</span><span id="var">$name</span> and <span id="var">$curr</span><span id="braces">)</span>;

  <span id="comment"># return if we haven't reached the next increment</span><br />  <span id="perlKey">return</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$curr</span> &lt; <span id="perlFunc">int</span><span id="braces">(</span><span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'next'</span><span id="braces">}</span><span id="braces">)</span><span id="braces">)</span>;

  <span id="perlKey">my</span> <span id="var">$index</span> = <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'index'</span><span id="braces">}</span>;
  <span id="perlKey">my</span> <span id="var">$num_bins</span> = <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'numbins'</span><span id="braces">}</span>;
  <span id="perlKey">my</span> <span id="var">$percent</span> = <span id="var">$index</span><span id="regExp">/</span><span id="var">$num_bins</span>*100;<br />
  <span id="perlKey">my</span> <span id="var">$log_str</span>;
  <span id="var">$log_str</span> .= <span id="sqStr">'      '</span>x<span id="var">$indent</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$index</span> == 0<span id="braces">)</span>;
  <span id="var">$log_str</span> .= <span id="dqStr">"\b"</span>x4;
  <span id="var">$log_str</span> .= <span id="perlFunc">sprintf</span><span id="braces">(</span><span id="dqStr">"<span id="var">%3s</span>%%"</span>, <span id="var">$percent</span><span id="braces">)</span>;
  <span id="var">$log_str</span> .= <span id="dqStr">"\n"</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$curr</span> == <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'max_val'</span><span id="braces">}</span><span id="braces">)</span>;

  <span id="var">$self</span>-&gt;<span id="method">info</span><span id="braces">(</span><span id="var">$log_str</span><span id="braces">)</span>;

  <span id="comment"># increment counters</span><br />  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'index'</span><span id="braces">}</span>++;
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'next'</span><span id="braces">}</span> += <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'binsize'</span><span id="braces">}</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE16" id="CODE16"></a>log_progressbar</td><td >description</td><td ><a href="#CODE15">prev</a></td><td ><a href="#CODE17">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">log_progressbar</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">my</span> <span id="var">$name</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">my</span> <span id="var">$curr</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">my</span> <span id="var">$indent</span> = <span id="perlFunc">shift</span>;
  
  <span id="method">throw</span><span id="braces">(</span><span id="dqStr">"You must provide a name and the current value for your progress bar"</span><span id="braces">)</span>
    <span id="perlKey">unless</span> <span id="braces">(</span><span id="var">$name</span> and <span id="var">$curr</span><span id="braces">)</span>;

  <span id="comment"># return if we haven't reached the next increment</span><br />  <span id="perlKey">return</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$curr</span> &lt; <span id="perlFunc">int</span><span id="braces">(</span><span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'next'</span><span id="braces">}</span><span id="braces">)</span><span id="braces">)</span>;

  <span id="perlKey">my</span> <span id="var">$index</span> = <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'index'</span><span id="braces">}</span>;
  <span id="perlKey">my</span> <span id="var">$num_bins</span> = <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'numbins'</span><span id="braces">}</span>;
  <span id="perlKey">my</span> <span id="var">$percent</span> = <span id="var">$index</span><span id="regExp">/</span><span id="var">$num_bins</span>*100;<br />
  <span id="perlKey">my</span> <span id="var">$log_str</span> = <span id="dqStr">"\r"</span>.<span id="braces">(</span><span id="sqStr">'  '</span>x<span id="var">$indent</span><span id="braces">)</span>.<span id="dqStr">"["</span>.<span id="braces">(</span><span id="sqStr">'='</span>x<span id="var">$index</span><span id="braces">)</span>.<span id="braces">(</span><span id="sqStr">' '</span><span id="method">x</span><span id="braces">(</span><span id="var">$num_bins</span>-<span id="var">$index</span><span id="braces">)</span><span id="braces">)</span>.<span id="dqStr">"] ${percent}\%"</span>;
  <span id="var">$log_str</span> .= <span id="dqStr">"\n"</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$curr</span> == <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'max_val'</span><span id="braces">}</span><span id="braces">)</span>;

  <span id="var">$self</span>-&gt;<span id="method">info</span><span id="braces">(</span><span id="var">$log_str</span><span id="braces">)</span>;

  <span id="comment"># increment counters</span><br />  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'index'</span><span id="braces">}</span>++;
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'next'</span><span id="braces">}</span> += <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_progress'</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$name</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'binsize'</span><span id="braces">}</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE17" id="CODE17"></a>logappend</td><td >description</td><td ><a href="#CODE16">prev</a></td><td ><a href="#CODE18">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">logappend</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_logappend'</span><span id="braces">}</span> = <span id="perlFunc">shift</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">@_</span><span id="braces">)</span>;
  <span id="perlKey">return</span> <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_logappend'</span><span id="braces">}</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE18" id="CODE18"></a>logauto</td><td >description</td><td ><a href="#CODE17">prev</a></td><td ><a href="#CODE19">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">logauto</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_log_auto'</span><span id="braces">}</span> = <span id="perlFunc">shift</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">@_</span><span id="braces">)</span>;
  <span id="perlKey">return</span> <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_log_auto'</span><span id="braces">}</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE19" id="CODE19"></a>logfile</td><td >description</td><td ><a href="#CODE18">prev</a></td><td ><a href="#CODE20">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">logfile</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_logfile'</span><span id="braces">}</span> = <span id="perlFunc">shift</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">@_</span><span id="braces">)</span>;
  <span id="perlKey">return</span> <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_logfile'</span><span id="braces">}</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE20" id="CODE20"></a>loglevel</td><td >description</td><td ><a href="#CODE19">prev</a></td><td ><a href="#CODE21">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">loglevel</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">return</span> <span id="var">$reverse_level_defs</span><span id="braces">[</span><span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'loglevel'</span><span id="braces">}</span><span id="braces">]</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE21" id="CODE21"></a>logpath</td><td >description</td><td ><a href="#CODE20">prev</a></td><td ><a href="#CODE22">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">logpath</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_logpath'</span><span id="braces">}</span> = <span id="perlFunc">shift</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">@_</span><span id="braces">)</span>;
  <span id="perlKey">return</span> <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_logpath'</span><span id="braces">}</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE22" id="CODE22"></a>mem</td><td ><a href="#POD10">description</a></td><td ><a href="#CODE21">prev</a></td><td ><a href="#CODE23">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">mem</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$mem</span> = `ps -p $$ -o vsz |tail -1`;
  <span id="perlFunc">chomp</span> <span id="var">$mem</span>;
  <span id="perlKey">return</span> <span id="var">$mem</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE23" id="CODE23"></a>new</td><td ><a href="#POD11">description</a></td><td ><a href="#CODE22">prev</a></td><td ><a href="#CODE24">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">new</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$caller</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">my</span> <span id="var">$class</span> = <span id="perlFunc">ref</span><span id="braces">(</span><span id="var">$caller</span><span id="braces">)</span> || <span id="var">$caller</span>;

  <span id="perlKey">my</span> <span id="braces">(</span><span id="var">$logfile</span>, <span id="var">$logauto</span>, <span id="var">$logautobase</span>, <span id="var">$logautoid</span>, <span id="var">$logpath</span>, <span id="var">$logappend</span>,
    <span id="var">$loglevel</span>, <span id="var">$is_component</span><span id="braces">)</span> = <span id="method">rearrange</span><span id="braces">(</span>
      <span id="braces">[</span><span id="sqStr">'LOGFILE'</span>, <span id="sqStr">'LOGAUTO'</span>, <span id="sqStr">'LOGAUTOBASE'</span>, <span id="sqStr">'LOGAUTOID'</span>, <span id="sqStr">'LOGPATH'</span>, <span id="sqStr">'LOGAPPEND'</span>,
      <span id="sqStr">'LOGLEVEL'</span>, <span id="sqStr">'IS_COMPONENT'</span><span id="braces">]</span>, <span id="var">@_</span><span id="braces">)</span>;
  
  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="braces">{</span> <span id="sqStr">'_warnings'</span>     =&gt; 0, <span id="braces">}</span>;
  <span id="perlFunc">bless</span> <span id="braces">(</span><span id="var">$self</span>, <span id="var">$class</span><span id="braces">)</span>;

  <span id="comment"># initialise</span><br />  <span id="var">$self</span>-&gt;<span id="method">logfile</span><span id="braces">(</span><span id="var">$logfile</span><span id="braces">)</span>;
  <span id="var">$self</span>-&gt;<span id="method">logpath</span><span id="braces">(</span><span id="var">$logpath</span><span id="braces">)</span>;
  <span id="var">$self</span>-&gt;<span id="method">logappend</span><span id="braces">(</span><span id="var">$logappend</span><span id="braces">)</span>;
  <span id="var">$self</span>-&gt;<span id="method">is_component</span><span id="braces">(</span><span id="var">$is_component</span><span id="braces">)</span>;

  <span id="comment"># automatic logfile creation</span><br />  <span id="var">$self</span>-&gt;<span id="method">logauto</span><span id="braces">(</span><span id="var">$logauto</span><span id="braces">)</span>;
  <span id="var">$logautoid</span> ||= <span id="method">strftime</span><span id="braces">(</span><span id="dqStr">"<span id="var">%Y</span><span id="var">%m</span><span id="var">%d</span>-<span id="var">%H</span><span id="var">%M</span><span id="var">%S</span>"</span>, <span id="perlFunc">localtime</span><span id="braces">)</span>;
  <span id="var">$self</span>-&gt;<span id="method">log_auto_id</span><span id="braces">(</span><span id="var">$logautoid</span><span id="braces">)</span>;
  <span id="var">$self</span>-&gt;<span id="method">create_auto_logfile</span><span id="braces">(</span><span id="var">$logautobase</span><span id="braces">)</span>;

  <span id="var">$loglevel</span> ||= <span id="sqStr">'none'</span>;
  <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$loglevel</span> =~ <span id="regExp">/^\d+$/</span> and <span id="var">$loglevel</span> &gt;= 1 and <span id="var">$loglevel</span> &lt;= 5<span id="braces">)</span> <span id="braces">{</span>
    <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'loglevel'</span><span id="braces">}</span> = <span id="var">$loglevel</span>;
  <span id="braces">}</span> <span id="perlKey">elsif</span> <span id="braces">(</span><span id="var">$level_defs</span><span id="braces">{</span><span id="perlFunc">lc</span><span id="braces">(</span><span id="var">$loglevel</span><span id="braces">)</span><span id="braces">}</span><span id="braces">)</span> <span id="braces">{</span>
    <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'loglevel'</span><span id="braces">}</span> = <span id="var">$level_defs</span><span id="braces">{</span><span id="perlFunc">lc</span><span id="braces">(</span><span id="var">$loglevel</span><span id="braces">)</span><span id="braces">}</span>;
  <span id="braces">}</span> <span id="perlKey">else</span> <span id="braces">{</span>
    <span id="method">throw</span><span id="braces">(</span><span id="sqStr">'Unknown loglevel: $loglevel.'</span><span id="braces">)</span>;
  <span id="braces">}</span>
  
  <span id="perlKey">return</span> <span id="var">$self</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE24" id="CODE24"></a>runtime</td><td >description</td><td ><a href="#CODE23">prev</a></td><td ><a href="#CODE25">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">runtime</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;

  <span id="perlKey">my</span> <span id="var">$runtime</span> = <span id="dqStr">"n/a"</span>;

  <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_start_time'</span><span id="braces">}</span><span id="braces">)</span> <span id="braces">{</span>
    <span id="perlKey">my</span> <span id="var">$diff</span> = <span id="perlFunc">time</span> - <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_start_time'</span><span id="braces">}</span>;
    <span id="perlKey">my</span> <span id="var">$sec</span> = <span id="var">$diff</span> % 60;
    <span id="var">$diff</span> = <span id="braces">(</span><span id="var">$diff</span> - <span id="var">$sec</span><span id="braces">)</span> / 60;<br />    <span id="perlKey">my</span> <span id="var">$min</span> = <span id="var">$diff</span> % 60;
    <span id="perlKey">my</span> <span id="var">$hours</span> = <span id="braces">(</span><span id="var">$diff</span> - <span id="var">$min</span><span id="braces">)</span> / 60;<br />    
    <span id="var">$runtime</span> = <span id="dqStr">"${hours}h ${min}min ${sec}sec"</span>;
  <span id="braces">}</span>

  <span id="perlKey">return</span> <span id="var">$runtime</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE25" id="CODE25"></a>time_and_mem</td><td >description</td><td ><a href="#CODE24">prev</a></td><td ><a href="#CODE26">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">time_and_mem</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$date</span> = strftime <span id="dqStr">"<span id="var">%T</span>"</span>, <span id="perlFunc">localtime</span>;
  <span id="perlKey">my</span> <span id="var">$mem</span> = `ps -p $$ -o vsz |tail -1`;
  <span id="perlFunc">chomp</span> <span id="var">$mem</span>;
  <span id="var">$mem</span> = <span id="method">parse_bytes</span><span id="braces">(</span><span id="var">$mem</span>*1000<span id="braces">)</span>;
  <span id="var">$mem</span> =~ <span id="regExp">s/ //</span>;
  <span id="perlKey">return</span> <span id="dqStr">"[<span id="var">$date</span>|<span id="var">$mem</span>]"</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE26" id="CODE26"></a>warning</td><td ><a href="#POD12">description</a></td><td ><a href="#CODE25">prev</a></td><td ><a href="#CODE27">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">warning</span>
{<pre>  <span id="perlKey">my</span> <span id="braces">(</span><span id="var">$self</span>, <span id="var">$txt</span>, <span id="var">$indent</span>, <span id="var">$stamped</span><span id="braces">)</span> = <span id="var">@_</span>;
  
  <span id="perlKey">return</span><span id="braces">(</span>0<span id="braces">)</span> <span id="perlKey">unless</span> <span id="braces">(</span><span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'loglevel'</span><span id="braces">}</span> &gt;= 3<span id="braces">)</span>;
  
  <span id="var">$txt</span> = <span id="dqStr">"WARNING: "</span> . <span id="var">$txt</span>;
  <span id="var">$self</span>-&gt;<span id="method">log_generic</span><span id="braces">(</span><span id="var">$txt</span>, <span id="var">$indent</span>, <span id="var">$stamped</span><span id="braces">)</span>;
  
  <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_warnings'</span><span id="braces">}</span>++;
  
  <span id="perlKey">return</span><span id="braces">(</span>1<span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE27" id="CODE27"></a>warning_count</td><td ><a href="#POD13">description</a></td><td ><a href="#CODE26">prev</a></td><td >next</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">warning_count</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$self</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">return</span> <span id="var">$self</span>-&gt;<span id="braces">{</span><span id="sqStr">'_warnings'</span><span id="braces">}</span>;</pre>}</td></div>
<div id="sep"></div>
<a name="General" id="General"></a>
<div id="mainTitle">General documentation</div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_CONTACT" id="_pod_CONTACT"></a>CONTACT</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Please email comments or questions to the public INB
  developers list at <<a href="mailto:inb-tecnico@lists.cnio.es" id="podEmail">inb-tecnico@lists.cnio.es</a>&gt;.<br />
  Questions may also be sent to the developer, 
  Jose Manuel Rodriguez <<a href="mailto:jmrodriguez@cnio.es" id="podEmail">jmrodriguez@cnio.es</a>&gt;.</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_" id="_pod_"></a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg[1]      : 
  Example     : 
  Description : 
  Return type : 
  Exceptions  : 
  Caller      : 
  Status      :</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_" id="_pod_"></a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg[1]      : 
  Example     : 
  Description : 
  Return type : 
  Exceptions  : 
  Caller      : 
  Status      :</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_" id="_pod_"></a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg[1]      : 
  Example     : 
  Description : 
  Return type : 
  Exceptions  : 
  Caller      : 
  Status      :</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_" id="_pod_"></a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg[1]      : 
  Example     : 
  Description : 
  Return type : 
  Exceptions  : 
  Caller      : 
  Status      : At Risk
              : under development</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_" id="_pod_"></a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg[1]      : 
  Example     : 
  Description : 
  Return type : 
  Exceptions  : 
  Caller      : 
  Status      :</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_" id="_pod_"></a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg[1]      : 
  Example     : 
  Description : 
  Return type : 
  Exceptions  : 
  Caller      : 
  Status      :</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_" id="_pod_"></a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg[1]      : 
  Example     : 
  Description : 
  Return type : 
  Exceptions  : 
  Caller      : 
  Status      :</pre></div>
<div id="sep"></div>
</body>
</html>
