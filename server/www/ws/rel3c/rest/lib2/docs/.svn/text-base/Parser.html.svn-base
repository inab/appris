<head>
<!-- Generated by perlmod2www.pl -->
<title>
Parser documentation.
</title>
<link rel="stylesheet" type="text/css" href="perl.css">
</head>
<body bgcolor="white">
<span id="modRootPath">APPRIS</span>
<span id="modName">Parser</span>
<div id="sep"></div>
<a name="TOP" id="TOP"></a>
<table id="daArea" width="100%"><tr><td id="daEntry" ><a href="#SUMMARY">Summary</a></td><td id="daEntry" ><a href="#libs">Included libraries</a></td><td id="daEntry" ><a href="#vardefs">Package variables</a></td><td id="daEntry" ><a href="#SYNOPSIS">Synopsis</a></td><td id="daEntry" ><a href="#DESCRIPTION">Description</a></td><td id="daEntry" ><a href="#General">General documentation</a></td><td id="daEntry" ><a href="#Methods">Methods</a></td></tr></table>
<div id="sep"></div>
<div id="descTitle">Summary</div>
<div id="descArea">Parser - Module to handle firestar results</div>
<div id="sep"></div>
<a name="vardefs" id="vardefs"></a><div id="descTitle">Package variables</div>
<div id="descArea"><div id="libEntry">No package variables defined.</div>
</div>
<div id="sep"></div>
<div id="descTitle">Included modules</div>
<div id="descArea"><div id="libEntry"><span id="use"><a href="Analysis.html">APPRIS::Analysis</a></span> </div>
<div id="libEntry"><span id="use"><a href="Analysis/Firestar.html">APPRIS::Analysis::Firestar</a></span> </div>
<div id="libEntry"><span id="use"><a href="Analysis/INERTIA.html">APPRIS::Analysis::INERTIA</a></span> </div>
<div id="libEntry"><span id="use"><a href="Transcript.html">APPRIS::Transcript</a></span> </div>
<div id="libEntry"><span id="use"><a href="Exporter.html">Exporter</a></span></div>
</div>
<div id="sep"></div>
<a name="libs" id="libs"></a>
<div id="descTitle">Inherit</div>
<div id="descArea"><span id="isa"><a href="Exporter.html">Exporter</a></span> </div>
<div id="sep"></div>
<a name="SYNOPSIS" id="SYNOPSIS"></a>
<div id="descTitle">Synopsis</div>
<div id="descArea"><pre id="podParagraph">  use APPRIS::Parser
    qw(
       parse_firestar
     );

  or to get all methods just

  use APPRIS::Parser;

  eval { parse_firestar($result) };
  if ($@) {
    print "Caught exception:\n$@";
  }</pre>
</div>
<div id="sep"></div>
<a name="DESCRIPTION" id="DESCRIPTION"></a>
<div id="descTitle">Description</div>
<div id="descArea">Module to handle firestar results.
</div>
<div id="sep"></div>
<a name="Methods" id="Methods"></a>
<div id="descTitle">Methods</div>
<table id="methIndArea" width="100%" cellspacing="0"><tr><td id="methIndEntry">_parse_inertia_file($$\$)</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE1">Code</a></td></tr>
<tr><td id="methIndEntry">_parse_inertia_file($$\$);</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE2">Code</a></td></tr>
<tr><td id="methIndEntry">_parse_omega_file($$\$)</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE3">Code</a></td></tr>
<tr><td id="methIndEntry">_parse_omega_file($$\$);(1)</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE4">Code</a></td></tr>
<tr><td id="methIndEntry">_parse_omega_file($$\$);(2)</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE5">Code</a></td></tr>
<tr><td id="methIndEntry">parse_firestar($$)</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE6">Code</a></td></tr>
<tr><td id="methIndEntry">parse_firestar($$);</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE7">Code</a></td></tr>
<tr><td id="methIndEntry">parse_firestar_gopher($)</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE8">Code</a></td></tr>
<tr><td id="methIndEntry">parse_firestar_gopher($);</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE9">Code</a></td></tr>
<tr><td id="methIndEntry">parse_inertia($$$$$)</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE10">Code</a></td></tr>
<tr><td id="methIndEntry">parse_inertia($$$$$);</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE11">Code</a></td></tr>
</table>
<div id="sep"></div>
<a name="MethDesc" id="MethDesc"></a>
<div id="mainTitle">Methods description</div>
<div id="sep"></div>
<div id="error">None available.</div>
<div id="sep"></div>
<a name="MethCode" id="MethCode"></a>
<div id="mainTitle">Methods code</div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE1" id="CODE1"></a>_parse_inertia_file($$\$)</td><td >description</td><td >prev</td><td ><a href="#CODE2">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="privSubName">_parse_inertia_file($$\$)</span>
{<pre>
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$type</span>, <span id="var">$result</span>, <span id="var">$ref_cutoffs</span><span id="braces">)</span> = <span id="var">@_</span>;

	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$transcript_id</span><span id="braces">)</span>;	
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">@results</span><span id="braces">)</span> = <span id="perlFunc">split</span><span id="braces">(</span> <span id="sqStr">'\n'</span>, <span id="var">$result</span><span id="braces">)</span>;
	
	<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$line</span> <span id="braces">(</span><span id="var">@results</span><span id="braces">)</span>
	<span id="braces">{</span>
		<span id="perlKey">next</span> <span id="perlKey">if</span><span id="braces">(</span> <span id="var">$line</span> =~ <span id="regExp">/^#/</span> <span id="braces">)</span>; <span id="comment"># Skip comment line</span><br />		<span id="var">$line</span>.=<span id="dqStr">"\n"</span>; <span id="comment"># Due we are spliting by '\n'</span><br />		
		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$line</span> =~ <span id="regExp">/^&gt;([^\t]+)\t+([^\n]+)\n+$/</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="var">$transcript_id</span> = <span id="var">$1</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$unusual_evolution</span><span id="braces">)</span> = <span id="var">$2</span>;

			$<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'unusual_evolution'</span><span id="braces">}</span> = <span id="var">$unusual_evolution</span>;			
			<span id="perlKey">unless</span> <span id="braces">(</span> <span id="perlFunc">exists</span> $<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> <span id="braces">)</span> <span id="braces">{</span>
				$<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> = <span id="var">$line</span>;
			<span id="braces">}</span> <span id="perlKey">else</span> <span id="braces">{</span>
				$<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> .= <span id="var">$line</span>;
			<span id="braces">}</span>			
		<span id="braces">}</span>		
		<span id="perlKey">elsif</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$transcript_id</span> and <span id="braces">(</span><span id="var">$line</span> =~ <span id="regExp">/^\t+([^\:]+)\:([^\_]+)\:([^\t]+)\t([^\n]+)\n+$/</span><span id="braces">)</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$start</span><span id="braces">)</span> = <span id="var">$1</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$end</span><span id="braces">)</span> = <span id="var">$2</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$strand</span><span id="braces">)</span> = <span id="var">$3</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$exon_annotation</span><span id="braces">)</span> = <span id="var">$4</span>;
		
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$exon_report</span><span id="braces">)</span> = <span id="braces">{</span>
							<span id="sqStr">'start'</span>					=&gt; <span id="var">$start</span>,
							<span id="sqStr">'end'</span>					=&gt; <span id="var">$end</span>,
							<span id="sqStr">'strand'</span>				=&gt; <span id="var">$strand</span>,
							<span id="sqStr">'unusual_evolution'</span>		=&gt; <span id="var">$exon_annotation</span>						
			<span id="braces">}</span>;
			<span id="perlFunc">push</span><span id="braces">(</span> @<span id="braces">{</span>$<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'residues'</span><span id="braces">}</span><span id="braces">}</span>, <span id="var">$exon_report</span> <span id="braces">)</span>;
			$<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> .= <span id="var">$line</span>;
		<span id="braces">}</span>		
	<span id="braces">}</span></pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE2" id="CODE2"></a>_parse_inertia_file($$\$);</td><td >description</td><td ><a href="#CODE1">prev</a></td><td ><a href="#CODE3">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="privSubName">_parse_inertia_file($$\$);</span>
{<pre><span id="perlKey">sub</span> <span id="method">_parse_omega_file</span><span id="braces">(</span>$$\$<span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE3" id="CODE3"></a>_parse_omega_file($$\$)</td><td >description</td><td ><a href="#CODE2">prev</a></td><td ><a href="#CODE4">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="privSubName">_parse_omega_file($$\$)</span>
{<pre>
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$type</span>, <span id="var">$result</span>, <span id="var">$ref_cutoffs</span><span id="braces">)</span> = <span id="var">@_</span>;

	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">@results</span><span id="braces">)</span> = <span id="perlFunc">split</span><span id="braces">(</span> <span id="sqStr">'\n'</span>, <span id="var">$result</span><span id="braces">)</span>;
	
	<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$line</span> <span id="braces">(</span><span id="var">@results</span><span id="braces">)</span>
	<span id="braces">{</span>
		<span id="perlKey">next</span> <span id="perlKey">if</span><span id="braces">(</span> <span id="var">$line</span> =~<span id="regExp">/^#/</span> <span id="braces">)</span>; <span id="comment"># Skip comment line</span><br />		<span id="var">$line</span>.=<span id="dqStr">"\n"</span>; <span id="comment"># Due we are spliting by '\n'</span><br />				
		<span id="comment"># omega_average omega_exon_id   start_exon      end_exon        strand_exon     difference_value        p_value st_desviation   exon_annotation transcript_list</span><br />		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$line</span> =~ <span id="regExp">/^([^\t]+)\t+([^\t]+)\t([^\t]+)\t([^\t]+)\t([^\t]+)\t([^\t]+)\t+([^\t]+)\t+([^\t]+)\t+([^\t]+)\t+([^\n]+)\n+$/</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$omega_mean</span><span id="braces">)</span> = <span id="var">$1</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$omega_exon_id</span><span id="braces">)</span> = <span id="var">$2</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$start</span><span id="braces">)</span> = <span id="var">$3</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$end</span><span id="braces">)</span> = <span id="var">$4</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$strand</span><span id="braces">)</span> = <span id="var">$5</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$d_value</span><span id="braces">)</span> = <span id="var">$6</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$p_value</span><span id="braces">)</span> = <span id="var">$7</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$st_desviation</span><span id="braces">)</span> = <span id="var">$8</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$exon_annotation</span><span id="braces">)</span> = <span id="var">$9</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$exon_transcrits_list</span><span id="braces">)</span> = <span id="var">$10</span>;
		
			<span id="comment"># Get the trasncipt with omega exons</span><br />			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">@exon_transcrits</span><span id="braces">)</span>;
			<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$exon_transcrits_list</span> <span id="perlKey">ne</span> <span id="sqStr">'NULL'</span> <span id="braces">)</span> <span id="braces">{</span>
				<span id="var">@exon_transcrits</span> = <span id="perlFunc">split</span><span id="braces">(</span><span id="sqStr">';'</span>,<span id="var">$exon_transcrits_list</span><span id="braces">)</span>;			
			<span id="braces">}</span>
			
			<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$transcript_id</span> <span id="braces">(</span><span id="var">@exon_transcrits</span><span id="braces">)</span>
			<span id="braces">{</span>
				<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$omega_exon_report</span><span id="braces">)</span> = <span id="braces">{</span>
							<span id="sqStr">'omega_exon_id'</span>			=&gt; <span id="var">$omega_exon_id</span>,
							<span id="sqStr">'start'</span>					=&gt; <span id="var">$start</span>,
							<span id="sqStr">'end'</span>					=&gt; <span id="var">$end</span>,
							<span id="sqStr">'strand'</span>				=&gt; <span id="var">$strand</span>,
							<span id="sqStr">'omega_mean'</span>			=&gt; <span id="var">$omega_mean</span>,
							<span id="sqStr">'st_deviation'</span>			=&gt; <span id="var">$st_desviation</span>,
							<span id="sqStr">'difference_value'</span>		=&gt; <span id="var">$d_value</span>,
							<span id="sqStr">'p_value'</span>				=&gt; <span id="var">$p_value</span>,
							<span id="sqStr">'unusual_evolution'</span>		=&gt; <span id="var">$exon_annotation</span>						
				<span id="braces">}</span>;
				<span id="perlFunc">push</span><span id="braces">(</span> @<span id="braces">{</span>$<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'residues'</span><span id="braces">}</span><span id="braces">}</span>, <span id="var">$omega_exon_report</span> <span id="braces">)</span>;
				<span id="perlKey">unless</span> <span id="braces">(</span> <span id="perlFunc">exists</span> $<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> <span id="braces">)</span> <span id="braces">{</span>
					$<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> = <span id="var">$line</span>;
				<span id="braces">}</span> <span id="perlKey">else</span> <span id="braces">{</span>
					$<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> .= <span id="var">$line</span>;
				<span id="braces">}</span>
			<span id="braces">}</span>
		<span id="braces">}</span>

		<span id="comment"># # omega_average omega_exon_id   start_exon      end_exon        difference_value        p_value st_desviation   exon_annotation transcript_list</span><br />		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$line</span> =~ <span id="regExp">/^&gt;([^\t]+)\t+([^\n]+)\n+$/</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$transcript_id</span><span id="braces">)</span> = <span id="var">$1</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$unusual_evolution</span><span id="braces">)</span> = <span id="var">$2</span>;

			$<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'unusual_evolution'</span><span id="braces">}</span> = <span id="var">$unusual_evolution</span>;			
			$<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> .= <span id="dqStr">"----------------------------------------------------------------------\n"</span>;
			$<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> .= <span id="var">$line</span>;

			$<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'omega_average'</span><span id="braces">}</span> = 0; <span id="comment"># DEPRECATED</span><br />			$<span id="braces">{</span><span id="var">$ref_cutoffs</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$transcript_id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="var">$type</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'omega_st_desviation'</span><span id="braces">}</span> = 0; <span id="comment"># DEPRECATED			</span><br />		<span id="braces">}</span>		
	<span id="braces">}</span></pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE4" id="CODE4"></a>_parse_omega_file($$\$);(1)</td><td >description</td><td ><a href="#CODE3">prev</a></td><td ><a href="#CODE5">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="privSubName">_parse_omega_file($$\$);(1)</span>
{<pre><span id="perlKey">sub</span> <span id="method">_parse_omega_file</span><span id="braces">(</span>$$\$<span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE5" id="CODE5"></a>_parse_omega_file($$\$);(2)</td><td >description</td><td ><a href="#CODE4">prev</a></td><td ><a href="#CODE6">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="privSubName">_parse_omega_file($$\$);(2)</span>
{<pre><span id="perlKey">sub</span> <span id="method">parse_firestar_gopher</span><span id="braces">(</span>$<span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE6" id="CODE6"></a>parse_firestar($$)</td><td >description</td><td ><a href="#CODE5">prev</a></td><td ><a href="#CODE7">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">parse_firestar($$)</span>
{<pre>
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$stable_id</span>, <span id="var">$result</span><span id="braces">)</span> = <span id="var">@_</span>;

	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$transcript_result</span><span id="braces">)</span> = <span id="sqStr">''</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$init_trans_result</span><span id="braces">)</span> = 0;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$transcripts</span><span id="braces">)</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cutoffs</span><span id="braces">)</span>;
	
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">@results</span><span id="braces">)</span> = <span id="perlFunc">split</span><span id="braces">(</span> <span id="sqStr">'\n'</span>, <span id="var">$result</span><span id="braces">)</span>;
	<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$line</span> <span id="braces">(</span><span id="var">@results</span><span id="braces">)</span>
	<span id="braces">{</span>
		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$line</span> <span id="perlKey">eq</span> <span id="sqStr">'######'</span><span id="braces">)</span> <span id="braces">{</span>
			<span id="comment"># Init trans result</span><br />			<span id="var">$transcript_result</span> = <span id="sqStr">''</span>;
			<span id="var">$init_trans_result</span> = 1;
		<span id="braces">}</span>
		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$init_trans_result</span> <span id="braces">)</span> <span id="braces">{</span>
			<span id="var">$transcript_result</span> .= <span id="var">$line</span>.<span id="dqStr">"\n"</span>;		
		<span id="braces">}</span>

		<span id="comment">#&gt;&gt;&gt;     OTTHUMT00000171822      29      46,47,48,49,67,68,69,70,98,99,100,101,166,170,171,394,411,412,413,448,452,480,481,492,495,497,498,499,504</span><br />		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$line</span>=~<span id="regExp">/^&gt;&gt;&gt;\t+([^\t]+)\t+([^\t]+)\t+([^\$]+)$/</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$id</span><span id="braces">)</span> = <span id="var">$1</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">@residue_list</span><span id="braces">)</span> = <span id="perlFunc">split</span><span id="braces">(</span><span id="sqStr">','</span>, <span id="var">$3</span><span id="braces">)</span>;

			<span id="comment"># Get the peptide position and scores</span><br />			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$residue_list_report</span><span id="braces">)</span>;
			<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$residue_position</span> <span id="braces">(</span><span id="var">@residue_list</span><span id="braces">)</span>
			<span id="braces">{</span>
				<span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$residue_position</span> and <span id="var">$residue_position</span> <span id="perlKey">ne</span> <span id="sqStr">''</span> <span id="braces">)</span>
				<span id="braces">{</span>
					<span id="comment">#76	6	VETATTVGYGDLY	 2h8pC  1k4cC  2r9rH</span><br />					<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$transcript_result</span> =~ <span id="regExp">/$residue_position\t+(\d+)\t+([^\t]*)\t+([^\n]*)[^\&gt;]*&gt;&gt;&gt;\t+$id/</span> <span id="braces">)</span>
					<span id="braces">{</span>
						<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$score</span><span id="braces">)</span> = <span id="var">$1</span>;
						<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$domain</span><span id="braces">)</span> = <span id="var">$2</span>;
						<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$pdb_list</span><span id="braces">)</span> = <span id="var">$3</span>; <span id="var">$pdb_list</span> =~ <span id="regExp">s/^\s*//</span>; <span id="var">$pdb_list</span> =~ <span id="regExp">s/\s*$//</span>;
						<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$residue_list_report</span><span id="braces">}</span>,<span id="braces">{</span>
								<span id="sqStr">'residue'</span>	=&gt; <span id="var">$residue_position</span>,
								<span id="sqStr">'score'</span>		=&gt; <span id="var">$score</span>,
								<span id="sqStr">'domain'</span>	=&gt; <span id="var">$domain</span>,
								<span id="sqStr">'pdb_list'</span>	=&gt; <span id="var">$pdb_list</span>,
						<span id="braces">}</span><span id="braces">)</span>;
					<span id="braces">}</span>
				<span id="braces">}</span>			
			<span id="braces">}</span>

			<span id="perlKey">if</span><span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$residue_list_report</span> and <span id="perlFunc">scalar</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$residue_list_report</span><span id="braces">}</span><span id="braces">)</span>&gt;0<span id="braces">)</span>
			<span id="braces">{</span>
				<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'residues'</span><span id="braces">}</span> = <span id="var">$residue_list_report</span>;
			<span id="braces">}</span>
			
			<span id="comment"># Save result for each transcript</span><br />			<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> = <span id="var">$transcript_result</span>;
			
			<span id="comment"># Init trans result</span><br />			<span id="var">$transcript_result</span> = <span id="sqStr">''</span>; 
		<span id="braces">}</span>
		<span id="comment">#C&gt;&gt;     OTTHUMT00000171822      3      46,47,48</span><br />		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$line</span>=~<span id="regExp">/^C&gt;&gt;\t+([^\t]+)\t+([^\t]+)\t+([^\$]+)$/</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$id</span><span id="braces">)</span> = <span id="var">$1</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">@residue_list</span><span id="braces">)</span> = <span id="perlFunc">split</span><span id="braces">(</span><span id="sqStr">','</span>, <span id="var">$3</span><span id="braces">)</span>;

			<span id="comment"># Get the peptide position and scores</span><br />			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$residue_list_report</span><span id="braces">)</span>;
			<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$residue_position</span> <span id="braces">(</span><span id="var">@residue_list</span><span id="braces">)</span>
			<span id="braces">{</span>
				<span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$residue_position</span> and <span id="var">$residue_position</span> <span id="perlKey">ne</span> <span id="sqStr">''</span> <span id="braces">)</span>
				<span id="braces">{</span>
					<span id="comment">#76	6	VETATTVGYGDLY	 2h8pC  1k4cC  2r9rH</span><br />					<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$transcript_result</span> =~ <span id="regExp">/$residue_position\t+(\d+)\t+([^\t]*)\t+([^\n]*)[^\&gt;]*&gt;&gt;\t+$id/</span> <span id="braces">)</span>
					<span id="braces">{</span>
						<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$score</span><span id="braces">)</span> = <span id="var">$1</span>;
						<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$domain</span><span id="braces">)</span> = <span id="var">$2</span>;
						<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$pdb_list</span><span id="braces">)</span> = <span id="var">$3</span>; <span id="var">$pdb_list</span> =~ <span id="regExp">s/^\s*//</span>; <span id="var">$pdb_list</span> =~ <span id="regExp">s/\s*$//</span>;
						<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$residue_list_report</span><span id="braces">}</span>,<span id="braces">{</span>
								<span id="sqStr">'residue'</span>	=&gt; <span id="var">$residue_position</span>,
								<span id="sqStr">'score'</span>		=&gt; <span id="var">$score</span>,
								<span id="sqStr">'domain'</span>	=&gt; <span id="var">$domain</span>,
								<span id="sqStr">'pdb_list'</span>	=&gt; <span id="var">$pdb_list</span>,				
						<span id="braces">}</span><span id="braces">)</span>;		
					<span id="braces">}</span>
				<span id="braces">}</span>
			<span id="braces">}</span>
			
			<span id="comment"># Sort residues</span><br />			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">@res_list</span><span id="braces">)</span> = @<span id="braces">{</span><span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'residues'</span><span id="braces">}</span><span id="braces">}</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">@sort_res_list</span><span id="braces">)</span> = <span id="perlFunc">sort</span> <span id="braces">{</span> <span id="var">$a</span>-&gt;<span id="braces">{</span><span id="sqStr">'peptide_position'</span><span id="braces">}</span> &lt;=&gt; <span id="var">$b</span>-&gt;<span id="braces">{</span><span id="sqStr">'peptide_position'</span><span id="braces">}</span> <span id="braces">}</span> <span id="var">@res_list</span>;
			<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'residues'</span><span id="braces">}</span> =\@ sort_res_list; 

			<span id="comment"># Save result for each transcript</span><br />			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$trans_result</span><span id="braces">)</span> = <span id="sqStr">''</span>;
			<span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">exists</span> <span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> and <span id="perlFunc">defined</span> <span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> <span id="braces">)</span>
			<span id="braces">{</span>
					<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> = <span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> . <span id="var">$transcript_result</span>;
			<span id="braces">}</span>
			
			<span id="comment"># Init result variable for the next</span><br />			<span id="var">$transcript_result</span> = <span id="sqStr">''</span>;
		<span id="braces">}</span>
		
		<span id="comment">#ACCEPT: ID\tTOTAL_SCORE\tTOTAL_MOTIFS\tNUM_SCORE_6\tNUM_SCORE_5\tNUM_SCORE_4\n		</span><br />		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$line</span> =~ <span id="regExp">/^ACCEPT:\s*([^\t]+)\t([^\t]+)\t([^\t]*)\t([^\t]+)\t([^\t]+)\t([^\n]+)\n*/</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$id</span><span id="braces">)</span> = <span id="var">$1</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$total_score</span><span id="braces">)</span> = <span id="var">$2</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$total_residues</span><span id="braces">)</span> = <span id="var">$3</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$num_residues_6</span><span id="braces">)</span> = <span id="var">$4</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$num_residues_5</span><span id="braces">)</span> = <span id="var">$5</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$num_residues_4</span><span id="braces">)</span> = <span id="var">$6</span>;

			<span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$id</span> and <span id="braces">(</span><span id="var">$id</span> <span id="perlKey">ne</span> <span id="sqStr">''</span><span id="braces">)</span> <span id="braces">)</span>
			<span id="braces">{</span>
				<span id="perlKey">unless</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$total_residues</span> and <span id="var">$total_residues</span> <span id="perlKey">ne</span> <span id="sqStr">''</span> <span id="braces">)</span>
					<span id="braces">{</span> <span id="var">$total_residues</span> = 0; <span id="braces">}</span>
					
				<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'num_residues'</span><span id="braces">}</span> = <span id="var">$total_residues</span>;
				<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'functional_residue'</span><span id="braces">}</span> = <span id="sqStr">'ACCEPT'</span>;
			<span id="braces">}</span>
		<span id="braces">}</span>
		<span id="comment">#REJECT: ID\tTOTAL_SCORE\tTOTAL_MOTIFS\tNUM_SCORE_6\tNUM_SCORE_5\tNUM_SCORE_4\n</span><br />		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$line</span> =~ <span id="regExp">/^REJECT:\s*([^\t]+)\t([^\t]+)\t([^\t]*)\t([^\t]+)\t([^\t]+)\t([^\n]+)\n*/</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$id</span><span id="braces">)</span> = <span id="var">$1</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$total_score</span><span id="braces">)</span> = <span id="var">$2</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$total_residues</span><span id="braces">)</span> = <span id="var">$3</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$num_residues_6</span><span id="braces">)</span> = <span id="var">$4</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$num_residues_5</span><span id="braces">)</span> = <span id="var">$5</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$num_residues_4</span><span id="braces">)</span> = <span id="var">$6</span>;

			<span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$id</span> and <span id="braces">(</span><span id="var">$id</span> <span id="perlKey">ne</span> <span id="sqStr">''</span><span id="braces">)</span> <span id="braces">)</span>
			<span id="braces">{</span>
				<span id="perlKey">unless</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$total_residues</span> and <span id="var">$total_residues</span> <span id="perlKey">ne</span> <span id="sqStr">''</span> <span id="braces">)</span>
					<span id="braces">{</span> <span id="var">$total_residues</span> = 0; <span id="braces">}</span>
					
				<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'num_residues'</span><span id="braces">}</span> = <span id="var">$total_residues</span>;
				<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'functional_residue'</span><span id="braces">}</span> = <span id="sqStr">'REJECT'</span>;
			<span id="braces">}</span>
		<span id="braces">}</span>
	<span id="braces">}</span>

	<span id="comment"># Create APPRIS object</span><br />	<span id="perlKey">while</span> <span id="braces">(</span> <span id="perlKey">my</span> <span id="braces">(</span><span id="var">$id</span>, <span id="var">$report</span><span id="braces">)</span> = <span id="perlFunc">each</span><span id="braces">(</span>%<span id="braces">{</span><span id="var">$cutoffs</span><span id="braces">}</span><span id="braces">)</span> <span id="braces">)</span>
	<span id="braces">{</span>
		<span id="comment"># create Firestar object</span><br />		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$regions</span><span id="braces">)</span>;		
		<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$residue</span> <span id="braces">(</span>@<span id="braces">{</span><span id="var">$report</span>-&gt;<span id="braces">{</span><span id="sqStr">'residues'</span><span id="braces">}</span><span id="braces">}</span><span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$regions</span><span id="braces">}</span>,
				<span id="module"><a href="Analysis/FirestarRegion.html">APPRIS::Analysis::FirestarRegion</a></span>-&gt;<span id="perlKey">new</span>
				<span id="braces">(</span>
					-residue	=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'residue'</span><span id="braces">}</span>,
					-score		=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'score'</span><span id="braces">}</span>,
					-domain		=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'domain'</span><span id="braces">}</span>,
				<span id="braces">)</span>				
			<span id="braces">)</span>;			
		<span id="braces">}</span>
		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$firestar</span><span id="braces">)</span> = <span id="module"><a href="Analysis/Firestar.html">APPRIS::Analysis::Firestar</a></span>-&gt;<span id="perlKey">new</span> <span id="braces">(</span>
						-result					=&gt; <span id="var">$report</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span>,
						-functional_residue		=&gt; <span id="var">$report</span>-&gt;<span id="braces">{</span><span id="sqStr">'functional_residue'</span><span id="braces">}</span>,
						-num_residues			=&gt; <span id="var">$report</span>-&gt;<span id="braces">{</span><span id="sqStr">'num_residues'</span><span id="braces">}</span>
		<span id="braces">)</span>;
		<span id="var">$firestar</span>-&gt;<span id="method">residues</span><span id="braces">(</span><span id="var">$regions</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$regions</span><span id="braces">)</span>;

		<span id="comment"># create Analysis object</span><br />		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$analysis</span><span id="braces">)</span> = <span id="module"><a href="Analysis.html">APPRIS::Analysis</a></span>-&gt;<span id="perlKey">new</span><span id="braces">(</span><span id="braces">)</span>;
		<span id="perlKey">if</span> <span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$firestar</span><span id="braces">)</span> <span id="braces">{</span>
			<span id="var">$analysis</span>-&gt;<span id="method">firestar</span><span id="braces">(</span><span id="var">$firestar</span><span id="braces">)</span>;
			<span id="var">$analysis</span>-&gt;<span id="method">number</span><span id="braces">(</span><span id="var">$analysis</span>-&gt;<span id="method">number</span>+1<span id="braces">)</span>;
		<span id="braces">}</span>
				
		<span id="comment"># create Transcript object</span><br />		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$transcript</span><span id="braces">)</span> = <span id="module"><a href="Transcript.html">APPRIS::Transcript</a></span>-&gt;<span id="perlKey">new</span>
		<span id="braces">(</span>
			-stable_id	=&gt; <span id="var">$id</span>,
		<span id="braces">)</span>;
		<span id="var">$transcript</span>-&gt;<span id="method">analysis</span><span id="braces">(</span><span id="var">$analysis</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$analysis</span><span id="braces">)</span>;

		<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$transcripts</span><span id="braces">}</span>, <span id="var">$transcript</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$transcript</span> <span id="braces">)</span>;
	<span id="braces">}</span>
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$entity</span><span id="braces">)</span> = <span id="module"><a href="Gene.html">APPRIS::Gene</a></span>-&gt;<span id="perlKey">new</span><span id="braces">(</span> -stable_id =&gt; <span id="var">$stable_id</span> <span id="braces">)</span>;
	<span id="var">$entity</span>-&gt;<span id="method">transcripts</span><span id="braces">(</span><span id="var">$transcripts</span><span id="braces">)</span>;

	<span id="perlKey">return</span> <span id="var">$entity</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE7" id="CODE7"></a>parse_firestar($$);</td><td >description</td><td ><a href="#CODE6">prev</a></td><td ><a href="#CODE8">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">parse_firestar($$);</span>
{<pre><span id="perlKey">sub</span> <span id="method">parse_inertia</span><span id="braces">(</span>$$$$$<span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE8" id="CODE8"></a>parse_firestar_gopher($)</td><td >description</td><td ><a href="#CODE7">prev</a></td><td ><a href="#CODE9">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">parse_firestar_gopher($)</span>
{<pre>
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$result</span><span id="braces">)</span> = <span id="var">@_</span>;

	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$transcript_result</span><span id="braces">)</span> = <span id="sqStr">''</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$init_trans_result</span><span id="braces">)</span> = 0;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$transcripts</span><span id="braces">)</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cutoffs</span><span id="braces">)</span>;
	
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">@results</span><span id="braces">)</span> = <span id="perlFunc">split</span><span id="braces">(</span> <span id="sqStr">'\n'</span>, <span id="var">$result</span><span id="braces">)</span>;
	<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$line</span> <span id="braces">(</span><span id="var">@results</span><span id="braces">)</span>
	<span id="braces">{</span>
		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$line</span> <span id="perlKey">eq</span> <span id="sqStr">'######'</span><span id="braces">)</span> <span id="braces">{</span>
			<span id="comment"># Init trans result</span><br />			<span id="var">$transcript_result</span> = <span id="sqStr">''</span>;
			<span id="var">$init_trans_result</span> = 1;
		<span id="braces">}</span>
		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$init_trans_result</span> <span id="braces">)</span> <span id="braces">{</span>
			<span id="var">$transcript_result</span> .= <span id="var">$line</span>.<span id="dqStr">"\n"</span>;		
		<span id="braces">}</span>

		<span id="comment">#&gt;&gt;&gt;     OTTHUMT00000171822      29      46,47,48,49,67,68,69,70,98,99,100,101,166,170,171,394,411,412,413,448,452,480,481,492,495,497,498,499,504</span><br />		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$line</span>=~<span id="regExp">/^&gt;&gt;&gt;\t+([^\t]+)\t+([^\t]+)\t+([^\$]+)$/</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$id</span><span id="braces">)</span> = <span id="var">$1</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">@residue_list</span><span id="braces">)</span> = <span id="perlFunc">split</span><span id="braces">(</span><span id="sqStr">','</span>, <span id="var">$3</span><span id="braces">)</span>;

			<span id="comment"># Get the peptide position and scores</span><br />			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$residue_list_report</span><span id="braces">)</span>;
			<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$residue_position</span> <span id="braces">(</span><span id="var">@residue_list</span><span id="braces">)</span>
			<span id="braces">{</span>
				<span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$residue_position</span> and <span id="var">$residue_position</span> <span id="perlKey">ne</span> <span id="sqStr">''</span> <span id="braces">)</span>
				<span id="braces">{</span>
					<span id="comment">#76	6	VETATTVGYGDLY	 2h8pC  1k4cC  2r9rH</span><br />					<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$transcript_result</span> =~ <span id="regExp">/$residue_position\t+(\d+)\t+([^\t]*)\t+([^\n]*)[^\&gt;]*&gt;&gt;&gt;\t+$id/</span> <span id="braces">)</span>
					<span id="braces">{</span>
						<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$score</span><span id="braces">)</span> = <span id="var">$1</span>;
						<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$domain</span><span id="braces">)</span> = <span id="var">$2</span>;
						<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$pdb_list</span><span id="braces">)</span> = <span id="var">$3</span>; <span id="var">$pdb_list</span> =~ <span id="regExp">s/^\s*//</span>; <span id="var">$pdb_list</span> =~ <span id="regExp">s/\s*$//</span>;
						<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$residue_list_report</span><span id="braces">}</span>,<span id="braces">{</span>
								<span id="sqStr">'residue'</span>	=&gt; <span id="var">$residue_position</span>,
								<span id="sqStr">'score'</span>		=&gt; <span id="var">$score</span>,
								<span id="sqStr">'domain'</span>	=&gt; <span id="var">$domain</span>,
								<span id="sqStr">'pdb_list'</span>	=&gt; <span id="var">$pdb_list</span>,
						<span id="braces">}</span><span id="braces">)</span>;
					<span id="braces">}</span>
				<span id="braces">}</span>			
			<span id="braces">}</span>

			<span id="perlKey">if</span><span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$residue_list_report</span> and <span id="perlFunc">scalar</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$residue_list_report</span><span id="braces">}</span><span id="braces">)</span>&gt;0<span id="braces">)</span>
			<span id="braces">{</span>
				<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'residues'</span><span id="braces">}</span> = <span id="var">$residue_list_report</span>;
			<span id="braces">}</span>
			
			<span id="comment"># Save result for each transcript</span><br />			<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> = <span id="var">$transcript_result</span>;
			
			<span id="comment"># Init trans result</span><br />			<span id="var">$transcript_result</span> = <span id="sqStr">''</span>; 
		<span id="braces">}</span>
		<span id="comment">#C&gt;&gt;     OTTHUMT00000171822      3      46,47,48</span><br />		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$line</span>=~<span id="regExp">/^C&gt;&gt;\t+([^\t]+)\t+([^\t]+)\t+([^\$]+)$/</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$id</span><span id="braces">)</span> = <span id="var">$1</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">@residue_list</span><span id="braces">)</span> = <span id="perlFunc">split</span><span id="braces">(</span><span id="sqStr">','</span>, <span id="var">$3</span><span id="braces">)</span>;

			<span id="comment"># Get the peptide position and scores</span><br />			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$residue_list_report</span><span id="braces">)</span>;
			<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$residue_position</span> <span id="braces">(</span><span id="var">@residue_list</span><span id="braces">)</span>
			<span id="braces">{</span>
				<span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$residue_position</span> and <span id="var">$residue_position</span> <span id="perlKey">ne</span> <span id="sqStr">''</span> <span id="braces">)</span>
				<span id="braces">{</span>
					<span id="comment">#76	6	VETATTVGYGDLY	 2h8pC  1k4cC  2r9rH</span><br />					<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$transcript_result</span> =~ <span id="regExp">/$residue_position\t+(\d+)\t+([^\t]*)\t+([^\n]*)[^\&gt;]*&gt;&gt;\t+$id/</span> <span id="braces">)</span>
					<span id="braces">{</span>
						<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$score</span><span id="braces">)</span> = <span id="var">$1</span>;
						<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$domain</span><span id="braces">)</span> = <span id="var">$2</span>;
						<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$pdb_list</span><span id="braces">)</span> = <span id="var">$3</span>; <span id="var">$pdb_list</span> =~ <span id="regExp">s/^\s*//</span>; <span id="var">$pdb_list</span> =~ <span id="regExp">s/\s*$//</span>;
						<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$residue_list_report</span><span id="braces">}</span>,<span id="braces">{</span>
								<span id="sqStr">'residue'</span>	=&gt; <span id="var">$residue_position</span>,
								<span id="sqStr">'score'</span>		=&gt; <span id="var">$score</span>,
								<span id="sqStr">'domain'</span>	=&gt; <span id="var">$domain</span>,
								<span id="sqStr">'pdb_list'</span>	=&gt; <span id="var">$pdb_list</span>,				
						<span id="braces">}</span><span id="braces">)</span>;		
					<span id="braces">}</span>
				<span id="braces">}</span>
			<span id="braces">}</span>
			
			<span id="comment"># Sort residues</span><br />			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">@res_list</span><span id="braces">)</span> = @<span id="braces">{</span><span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'residues'</span><span id="braces">}</span><span id="braces">}</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">@sort_res_list</span><span id="braces">)</span> = <span id="perlFunc">sort</span> <span id="braces">{</span> <span id="var">$a</span>-&gt;<span id="braces">{</span><span id="sqStr">'peptide_position'</span><span id="braces">}</span> &lt;=&gt; <span id="var">$b</span>-&gt;<span id="braces">{</span><span id="sqStr">'peptide_position'</span><span id="braces">}</span> <span id="braces">}</span> <span id="var">@res_list</span>;
			<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'residues'</span><span id="braces">}</span> =\@ sort_res_list; 

			<span id="comment"># Save result for each transcript</span><br />			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$trans_result</span><span id="braces">)</span> = <span id="sqStr">''</span>;
			<span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">exists</span> <span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> and <span id="perlFunc">defined</span> <span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> <span id="braces">)</span>
			<span id="braces">{</span>
					<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> = <span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span> . <span id="var">$transcript_result</span>;
			<span id="braces">}</span>
			
			<span id="comment"># Init result variable for the next</span><br />			<span id="var">$transcript_result</span> = <span id="sqStr">''</span>;
		<span id="braces">}</span>
		
		<span id="comment">#ACCEPT: ID\tTOTAL_SCORE\tTOTAL_MOTIFS\tNUM_SCORE_6\tNUM_SCORE_5\tNUM_SCORE_4\n		</span><br />		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$line</span> =~ <span id="regExp">/^ACCEPT:\s*([^\t]+)\t([^\t]+)\t([^\t]*)\t([^\t]+)\t([^\t]+)\t([^\n]+)\n*/</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$id</span><span id="braces">)</span> = <span id="var">$1</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$total_score</span><span id="braces">)</span> = <span id="var">$2</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$total_residues</span><span id="braces">)</span> = <span id="var">$3</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$num_residues_6</span><span id="braces">)</span> = <span id="var">$4</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$num_residues_5</span><span id="braces">)</span> = <span id="var">$5</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$num_residues_4</span><span id="braces">)</span> = <span id="var">$6</span>;

			<span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$id</span> and <span id="braces">(</span><span id="var">$id</span> <span id="perlKey">ne</span> <span id="sqStr">''</span><span id="braces">)</span> <span id="braces">)</span>
			<span id="braces">{</span>
				<span id="perlKey">unless</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$total_residues</span> and <span id="var">$total_residues</span> <span id="perlKey">ne</span> <span id="sqStr">''</span> <span id="braces">)</span>
					<span id="braces">{</span> <span id="var">$total_residues</span> = 0; <span id="braces">}</span>
					
				<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'num_residues'</span><span id="braces">}</span> = <span id="var">$total_residues</span>;
				<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'functional_residue'</span><span id="braces">}</span> = <span id="sqStr">'ACCEPT'</span>;
			<span id="braces">}</span>
		<span id="braces">}</span>
		<span id="comment">#REJECT: ID\tTOTAL_SCORE\tTOTAL_MOTIFS\tNUM_SCORE_6\tNUM_SCORE_5\tNUM_SCORE_4\n</span><br />		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$line</span> =~ <span id="regExp">/^REJECT:\s*([^\t]+)\t([^\t]+)\t([^\t]*)\t([^\t]+)\t([^\t]+)\t([^\n]+)\n*/</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$id</span><span id="braces">)</span> = <span id="var">$1</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$total_score</span><span id="braces">)</span> = <span id="var">$2</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$total_residues</span><span id="braces">)</span> = <span id="var">$3</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$num_residues_6</span><span id="braces">)</span> = <span id="var">$4</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$num_residues_5</span><span id="braces">)</span> = <span id="var">$5</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$num_residues_4</span><span id="braces">)</span> = <span id="var">$6</span>;

			<span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$id</span> and <span id="braces">(</span><span id="var">$id</span> <span id="perlKey">ne</span> <span id="sqStr">''</span><span id="braces">)</span> <span id="braces">)</span>
			<span id="braces">{</span>
				<span id="perlKey">unless</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$total_residues</span> and <span id="var">$total_residues</span> <span id="perlKey">ne</span> <span id="sqStr">''</span> <span id="braces">)</span>
					<span id="braces">{</span> <span id="var">$total_residues</span> = 0; <span id="braces">}</span>
					
				<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'num_residues'</span><span id="braces">}</span> = <span id="var">$total_residues</span>;
				<span id="var">$cutoffs</span>-&gt;<span id="braces">{</span><span id="var">$id</span><span id="braces">}</span>-&gt;<span id="braces">{</span><span id="sqStr">'functional_residue'</span><span id="braces">}</span> = <span id="sqStr">'REJECT'</span>;
			<span id="braces">}</span>
		<span id="braces">}</span>
	<span id="braces">}</span>

	<span id="comment"># Create APPRIS object</span><br />	<span id="perlKey">while</span> <span id="braces">(</span> <span id="perlKey">my</span> <span id="braces">(</span><span id="var">$id</span>, <span id="var">$report</span><span id="braces">)</span> = <span id="perlFunc">each</span><span id="braces">(</span>%<span id="braces">{</span><span id="var">$cutoffs</span><span id="braces">}</span><span id="braces">)</span> <span id="braces">)</span>
	<span id="braces">{</span>
		<span id="comment"># create Firestar object</span><br />		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$regions</span><span id="braces">)</span>;		
		<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$residue</span> <span id="braces">(</span>@<span id="braces">{</span><span id="var">$report</span>-&gt;<span id="braces">{</span><span id="sqStr">'residues'</span><span id="braces">}</span><span id="braces">}</span><span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$regions</span><span id="braces">}</span>,
				<span id="module"><a href="Analysis/FirestarRegion.html">APPRIS::Analysis::FirestarRegion</a></span>-&gt;<span id="perlKey">new</span>
				<span id="braces">(</span>
					-residue	=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'residue'</span><span id="braces">}</span>,
					-score		=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'score'</span><span id="braces">}</span>,
					-domain		=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'domain'</span><span id="braces">}</span>,
				<span id="braces">)</span>				
			<span id="braces">)</span>;			
		<span id="braces">}</span>
		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$firestar</span><span id="braces">)</span> = <span id="module"><a href="Analysis/Firestar.html">APPRIS::Analysis::Firestar</a></span>-&gt;<span id="perlKey">new</span> <span id="braces">(</span>
						-result					=&gt; <span id="var">$report</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span>,
						-functional_residue		=&gt; <span id="var">$report</span>-&gt;<span id="braces">{</span><span id="sqStr">'functional_residue'</span><span id="braces">}</span>,
						-num_residues			=&gt; <span id="var">$report</span>-&gt;<span id="braces">{</span><span id="sqStr">'num_residues'</span><span id="braces">}</span>
		<span id="braces">)</span>;
		<span id="var">$firestar</span>-&gt;<span id="method">residues</span><span id="braces">(</span><span id="var">$regions</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$regions</span><span id="braces">)</span>;

		<span id="comment"># create Analysis object</span><br />		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$analysis</span><span id="braces">)</span> = <span id="module"><a href="Analysis.html">APPRIS::Analysis</a></span>-&gt;<span id="perlKey">new</span><span id="braces">(</span><span id="braces">)</span>;
		<span id="perlKey">if</span> <span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$firestar</span><span id="braces">)</span> <span id="braces">{</span>
			<span id="var">$analysis</span>-&gt;<span id="method">firestar</span><span id="braces">(</span><span id="var">$firestar</span><span id="braces">)</span>;
			<span id="var">$analysis</span>-&gt;<span id="method">number</span><span id="braces">(</span><span id="var">$analysis</span>-&gt;<span id="method">number</span>+1<span id="braces">)</span>;
		<span id="braces">}</span>
				
		<span id="comment"># create Transcript object</span><br />		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$transcript</span><span id="braces">)</span> = <span id="module"><a href="Transcript.html">APPRIS::Transcript</a></span>-&gt;<span id="perlKey">new</span>
		<span id="braces">(</span>
			-stable_id	=&gt; <span id="var">$id</span>,
		<span id="braces">)</span>;
		<span id="var">$transcript</span>-&gt;<span id="method">analysis</span><span id="braces">(</span><span id="var">$analysis</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$analysis</span><span id="braces">)</span>;

		<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$transcripts</span><span id="braces">}</span>, <span id="var">$transcript</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$transcript</span> <span id="braces">)</span>;
	<span id="braces">}</span>

	<span id="perlKey">return</span> <span id="var">$transcripts</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE9" id="CODE9"></a>parse_firestar_gopher($);</td><td >description</td><td ><a href="#CODE8">prev</a></td><td ><a href="#CODE10">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">parse_firestar_gopher($);</span>
{<pre></pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE10" id="CODE10"></a>parse_inertia($$$$$)</td><td >description</td><td ><a href="#CODE9">prev</a></td><td ><a href="#CODE11">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">parse_inertia($$$$$)</span>
{<pre>
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$stable_id</span>, <span id="var">$inertia_i</span>, <span id="var">$mafft_i</span>, <span id="var">$prank_i</span>, <span id="var">$kalign_i</span><span id="braces">)</span> = <span id="var">@_</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$transcripts</span><span id="braces">)</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cutoffs</span><span id="braces">)</span>;
	
	<span id="method">_parse_inertia_file</span><span id="braces">(</span><span id="sqStr">'inertia'</span>, <span id="var">$inertia_i</span>, <span id="var">$cutoffs</span><span id="braces">)</span>;
	<span id="method">_parse_omega_file</span><span id="braces">(</span><span id="sqStr">'mafft'</span>, <span id="var">$mafft_i</span>, <span id="var">$cutoffs</span><span id="braces">)</span>;
	<span id="method">_parse_omega_file</span><span id="braces">(</span><span id="sqStr">'prank'</span>, <span id="var">$prank_i</span>, <span id="var">$cutoffs</span><span id="braces">)</span>;
	<span id="method">_parse_omega_file</span><span id="braces">(</span><span id="sqStr">'kalign'</span>, <span id="var">$kalign_i</span>, <span id="var">$cutoffs</span><span id="braces">)</span>;

	<span id="comment"># Create APPRIS objects</span><br />	<span id="perlKey">while</span> <span id="braces">(</span> <span id="perlKey">my</span> <span id="braces">(</span><span id="var">$id</span>, <span id="var">$report</span><span id="braces">)</span> = <span id="perlFunc">each</span><span id="braces">(</span>%<span id="braces">{</span><span id="var">$cutoffs</span><span id="braces">}</span><span id="braces">)</span> <span id="braces">)</span>
	<span id="braces">{</span>
		<span id="comment"># create INERTIA object</span><br />		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$inertia</span><span id="braces">)</span>;
		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$regions</span><span id="braces">)</span>;
		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$report2</span><span id="braces">)</span> = <span id="var">$report</span>-&gt;<span id="braces">{</span><span id="sqStr">'inertia'</span><span id="braces">}</span>;
		<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$residue</span> <span id="braces">(</span>@<span id="braces">{</span><span id="var">$report2</span>-&gt;<span id="braces">{</span><span id="sqStr">'residues'</span><span id="braces">}</span><span id="braces">}</span><span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$regions</span><span id="braces">}</span>,
				<span id="module"><a href="Analysis/INERTIARegion.html">APPRIS::Analysis::INERTIARegion</a></span>-&gt;<span id="perlKey">new</span>
				<span id="braces">(</span>
					-start				=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'start'</span><span id="braces">}</span>,
					-end				=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'end'</span><span id="braces">}</span>,
					-strand				=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'strand'</span><span id="braces">}</span>,
					-unusual_evolution	=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'unusual_evolution'</span><span id="braces">}</span>
				<span id="braces">)</span>
			<span id="braces">)</span>;
		<span id="braces">}</span>
		<span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">exists</span> <span id="var">$report2</span>-&gt;<span id="braces">{</span><span id="sqStr">'unusual_evolution'</span><span id="braces">}</span> and <span id="perlFunc">defined</span> <span id="var">$report2</span>-&gt;<span id="braces">{</span><span id="sqStr">'unusual_evolution'</span><span id="braces">}</span> <span id="braces">)</span> <span id="braces">{</span>
			<span id="var">$inertia</span> = <span id="module"><a href="Analysis/INERTIA.html">APPRIS::Analysis::INERTIA</a></span>-&gt;<span id="perlKey">new</span>
			<span id="braces">(</span>
				-unusual_evolution		=&gt; <span id="var">$report2</span>-&gt;<span id="braces">{</span><span id="sqStr">'unusual_evolution'</span><span id="braces">}</span>
			<span id="braces">)</span>;
			<span id="var">$inertia</span>-&gt;<span id="method">regions</span><span id="braces">(</span><span id="var">$regions</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$regions</span><span id="braces">)</span>;				
		<span id="braces">}</span>

		<span id="perlKey">while</span> <span id="braces">(</span> <span id="perlKey">my</span> <span id="braces">(</span><span id="var">$type</span>, <span id="var">$report2</span><span id="braces">)</span> = <span id="perlFunc">each</span><span id="braces">(</span>%<span id="braces">{</span><span id="var">$report</span><span id="braces">}</span><span id="braces">)</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlKey">if</span> <span id="braces">(</span> <span id="braces">(</span><span id="var">$type</span> <span id="perlKey">eq</span> <span id="sqStr">'mafft'</span><span id="braces">)</span> or <span id="braces">(</span><span id="var">$type</span> <span id="perlKey">eq</span> <span id="sqStr">'prank'</span><span id="braces">)</span> or <span id="braces">(</span><span id="var">$type</span> <span id="perlKey">eq</span> <span id="sqStr">'kalign'</span><span id="braces">)</span> <span id="braces">)</span>
			<span id="braces">{</span>
				<span id="comment"># create Omega object</span><br />				<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$omega</span><span id="braces">)</span>;
				<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$regions</span><span id="braces">)</span>;
				
				<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$residue</span> <span id="braces">(</span>@<span id="braces">{</span><span id="var">$report2</span>-&gt;<span id="braces">{</span><span id="sqStr">'residues'</span><span id="braces">}</span><span id="braces">}</span><span id="braces">)</span>
				<span id="braces">{</span>
					<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$regions</span><span id="braces">}</span>,
						<span id="module"><a href="Analysis/OmegaRegion.html">APPRIS::Analysis::OmegaRegion</a></span>-&gt;<span id="perlKey">new</span>
						<span id="braces">(</span>
							-start				=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'start'</span><span id="braces">}</span>,
							-end				=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'end'</span><span id="braces">}</span>,
							-omega_mean			=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'omega_mean'</span><span id="braces">}</span>,
							-st_deviation		=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'st_deviation'</span><span id="braces">}</span>,
							-p_value			=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'p_value'</span><span id="braces">}</span>,
							-difference_value	=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'difference_value'</span><span id="braces">}</span>,
							-unusual_evolution	=&gt; <span id="var">$residue</span>-&gt;<span id="braces">{</span><span id="sqStr">'unusual_evolution'</span><span id="braces">}</span>
						<span id="braces">)</span>
					<span id="braces">)</span>;			
				<span id="braces">}</span>
				<span id="var">$omega</span> = <span id="module"><a href="Analysis/Omega.html">APPRIS::Analysis::Omega</a></span>-&gt;<span id="perlKey">new</span>
				<span id="braces">(</span>
					-average			=&gt; <span id="var">$report2</span>-&gt;<span id="braces">{</span><span id="sqStr">'omega_average'</span><span id="braces">}</span>,
					-st_desviation		=&gt; <span id="var">$report2</span>-&gt;<span id="braces">{</span><span id="sqStr">'omega_st_desviation'</span><span id="braces">}</span>,
					-result				=&gt; <span id="var">$report2</span>-&gt;<span id="braces">{</span><span id="sqStr">'result'</span><span id="braces">}</span>,
					-unusual_evolution	=&gt; <span id="var">$report2</span>-&gt;<span id="braces">{</span><span id="sqStr">'unusual_evolution'</span><span id="braces">}</span>
				<span id="braces">)</span>;
				<span id="var">$omega</span>-&gt;<span id="method">regions</span><span id="braces">(</span><span id="var">$regions</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$regions</span><span id="braces">)</span>;
				
				<span id="var">$inertia</span>-&gt;<span id="method">mafft_alignment</span><span id="braces">(</span><span id="var">$omega</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$inertia</span> and <span id="var">$omega</span> and <span id="braces">(</span><span id="var">$type</span> <span id="perlKey">eq</span> <span id="sqStr">'mafft'</span><span id="braces">)</span> <span id="braces">)</span>;
				<span id="var">$inertia</span>-&gt;<span id="method">prank_alignment</span><span id="braces">(</span><span id="var">$omega</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$inertia</span> and <span id="var">$omega</span> and <span id="braces">(</span><span id="var">$type</span> <span id="perlKey">eq</span> <span id="sqStr">'prank'</span><span id="braces">)</span> <span id="braces">)</span>;
				<span id="var">$inertia</span>-&gt;<span id="method">kalign_alignment</span><span id="braces">(</span><span id="var">$omega</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$inertia</span> and <span id="var">$omega</span> and <span id="braces">(</span><span id="var">$type</span> <span id="perlKey">eq</span> <span id="sqStr">'kalign'</span><span id="braces">)</span> <span id="braces">)</span>;
			<span id="braces">}</span>			
		<span id="braces">}</span>
		
		<span id="comment"># create Analysis object			</span><br />		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$analysis</span><span id="braces">)</span>;
		<span id="perlKey">if</span> <span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$inertia</span><span id="braces">)</span> <span id="braces">{</span>
			<span id="var">$analysis</span> = <span id="module"><a href="Analysis.html">APPRIS::Analysis</a></span>-&gt;<span id="perlKey">new</span><span id="braces">(</span><span id="braces">)</span>;
			<span id="var">$analysis</span>-&gt;<span id="method">inertia</span><span id="braces">(</span><span id="var">$inertia</span><span id="braces">)</span>;
			<span id="var">$analysis</span>-&gt;<span id="method">number</span><span id="braces">(</span><span id="var">$analysis</span>-&gt;<span id="method">number</span>+1<span id="braces">)</span>;
		<span id="braces">}</span>
					
		<span id="comment"># create Transcript object</span><br />		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$transcript</span><span id="braces">)</span> = <span id="module"><a href="Transcript.html">APPRIS::Transcript</a></span>-&gt;<span id="perlKey">new</span> <span id="braces">(</span> -stable_id	=&gt; <span id="var">$id</span> <span id="braces">)</span>;
		<span id="var">$transcript</span>-&gt;<span id="method">analysis</span><span id="braces">(</span><span id="var">$analysis</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$analysis</span><span id="braces">)</span>;
		<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$transcripts</span><span id="braces">}</span>, <span id="var">$transcript</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$transcript</span> <span id="braces">)</span>;		
	<span id="braces">}</span>
	
	<span id="comment"># create Gene object</span><br />	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$entity</span><span id="braces">)</span> = <span id="module"><a href="Gene.html">APPRIS::Gene</a></span>-&gt;<span id="perlKey">new</span> <span id="braces">(</span> -stable_id =&gt; <span id="var">$stable_id</span> <span id="braces">)</span>;
	<span id="var">$entity</span>-&gt;<span id="method">transcripts</span><span id="braces">(</span><span id="var">$transcripts</span><span id="braces">)</span>;

	<span id="perlKey">return</span> <span id="var">$entity</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE11" id="CODE11"></a>parse_inertia($$$$$);</td><td >description</td><td ><a href="#CODE10">prev</a></td><td >next</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">parse_inertia($$$$$);</span>
{<pre><span id="perlKey">sub</span> <span id="method">_parse_inertia_file</span><span id="braces">(</span>$$\$<span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<a name="General" id="General"></a>
<div id="mainTitle">General documentation</div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_CONTACT" id="_pod_CONTACT"></a>CONTACT</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Please email comments or questions to the public INB
  developers list at <<a href="mailto:inb-tecnico@lists.cnio.es" id="podEmail">inb-tecnico@lists.cnio.es</a>&gt;.<br />
  Questions may also be sent to the developer, 
  Jose Manuel Rodriguez <<a href="mailto:jmrodriguez@cnio.es" id="podEmail">jmrodriguez@cnio.es</a>&gt;.</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_parse_firestar" id="_pod_parse_firestar"></a>parse_firestar</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg [1]    : String $id 
               The stable ID of the gene to retrieve
  Arg [2]    : string $result
               Parse firestar result
  Example    : use <B>APPRIS::Parser</B> qw(parse_firestar);
               parse_firestar($result);
  Description: Parse output of firestar.
  Returntype : APPRIS::Gene or undef
  Exceptions : return undef
  Caller     : generally on error</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_parse_inertia" id="_pod_parse_inertia"></a>parse_inertia</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg [1]    : String $id 
               The stable ID of the gene to retrieve
  Arg [2]    : string $inertia
               INERTIA result
  Arg [3]    : string $mafft
               MAFFT Omega result
  Arg [4]    : string $prank
               Prank Omega result
  Arg [5]    : string $kalign
               Kalign Omega result
  Example    : use <B>APPRIS::Parser</B> qw(parse_inertia);
               parse_inertia($id, $mafft, $prank, $kalign);
  Description: Parse the output of inertia.
  Returntype : APPRIS::Gene or undef
  Exceptions : return undef
  Caller     : generally on error</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_parse_firestar_gopher" id="_pod_parse_firestar_gopher"></a>parse_firestar_gopher</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg [1]    : string $result
               Parse firestar result
  Example    : use <B>APPRIS::Parser</B> qw(parse_firestar);
               parse_firestar($result);
  Description: Execute MOBY web services of firestar.
  Returntype : Listref of APPRIS::Transcript or undef
  Exceptions : return undef
  Caller     : generally on error</pre></div>
<div id="sep"></div>
</body>
</html>
