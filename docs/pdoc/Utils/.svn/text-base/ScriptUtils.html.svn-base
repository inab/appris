<head>
<!-- Generated by perlmod2www.pl -->
<title>
ScriptUtils documentation.
</title>
<link rel="stylesheet" type="text/css" href="../perl.css">
</head>
<body bgcolor="white">
<span id="modRootPath">APPRIS::Utils</span>
<span id="modName">ScriptUtils</span>
<div id="sep"></div>
<a name="TOP" id="TOP"></a>
<table id="daArea" width="100%"><tr><td id="daEntry" ><a href="#SUMMARY">Summary</a></td><td id="daEntry" ><a href="#vardefs">Package variables</a></td><td id="daEntry" ><a href="#SYNOPSIS">Synopsis</a></td><td id="daEntry" ><a href="#DESCRIPTION">Description</a></td><td id="daEntry" ><a href="#General">General documentation</a></td><td id="daEntry" ><a href="#Methods">Methods</a></td></tr></table>
<div id="sep"></div>
<div id="descTitle">Summary</div>
<div id="descArea">APPRIS::Utils::ScriptUtils;</div>
<div id="sep"></div>
<a name="vardefs" id="vardefs"></a><div id="descTitle">Package variables</div>
<div id="descArea"><div id="libEntry">No package variables defined.</div>
</div>
<div id="sep"></div>
<div id="descTitle">Included modules</div>
<div id="descArea"><div id="libEntry"><span id="use"><a href="../Exporter.html">Exporter</a></span></div>
</div>
<div id="sep"></div>
<a name="SYNOPSIS" id="SYNOPSIS"></a>
<div id="descTitle">Synopsis</div>
<div id="descArea">
</div>
<div id="sep"></div>
<a name="DESCRIPTION" id="DESCRIPTION"></a>
<div id="descTitle">Description</div>
<div id="descArea">
</div>
<div id="sep"></div>
<a name="Methods" id="Methods"></a>
<div id="descTitle">Methods</div>
<table id="methIndArea" width="100%" cellspacing="0"><tr><td id="methIndEntry">_by_chr_num</td><td id="methIndEntry"><a href="#POD1">Description</a></td><td id="methIndEntry"><a href="#CODE1">Code</a></td></tr>
<tr><td id="methIndEntry">commify</td><td id="methIndEntry"><a href="#POD2">Description</a></td><td id="methIndEntry"><a href="#CODE2">Code</a></td></tr>
<tr><td id="methIndEntry">directory_hash</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE3">Code</a></td></tr>
<tr><td id="methIndEntry">dynamic_use</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE4">Code</a></td></tr>
<tr><td id="methIndEntry">inject</td><td id="methIndEntry"><a href="#POD3">Description</a></td><td id="methIndEntry"><a href="#CODE5">Code</a></td></tr>
<tr><td id="methIndEntry">parse_bytes</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE6">Code</a></td></tr>
<tr><td id="methIndEntry">path_append</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE7">Code</a></td></tr>
<tr><td id="methIndEntry">sort_chromosomes</td><td id="methIndEntry"><a href="#POD4">Description</a></td><td id="methIndEntry"><a href="#CODE8">Code</a></td></tr>
<tr><td id="methIndEntry">user_proceed</td><td id="methIndEntry"><a href="#POD5">Description</a></td><td id="methIndEntry"><a href="#CODE9">Code</a></td></tr>
</table>
<div id="sep"></div>
<a name="MethDesc" id="MethDesc"></a>
<div id="mainTitle">Methods description</div>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod__by_chr_num" id="_pod__by_chr_num"></a><a name="POD1" id="POD1"></a>_by_chr_num</td><td ><a href="#CODE1">code</a></td><td >&nbsp;&nbsp;&nbsp;&nbsp;</td><td ><a href="#POD2">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Example     : my @sorted = sort _by_chr_num qw(X, 6-COX, 14, 7);
  Description : Subroutine to use in sort for sorting chromosomes. Sorts
                numerically, then alphabetically
  Return type : values to be used by sort
  Exceptions  : none
  Caller      : internal ($self->sort_chromosomes)</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_commify" id="_pod_commify"></a><a name="POD2" id="POD2"></a>commify</td><td ><a href="#CODE2">code</a></td><td ><a href="#POD1">prev</a></td><td ><a href="#POD3">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Arg[1]      : Int $num - a number to commify
  Example     : print "An easy to read number: ".$self->commify(100000000);
                # will print 100,000,000
  Description : put commas into a number to make it easier to read
  Return type : a string representing the commified number
  Exceptions  : none
  Caller      : general
  Status      : stable</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_inject" id="_pod_inject"></a><a name="POD3" id="POD3"></a>inject</td><td ><a href="#CODE5">code</a></td><td ><a href="#POD2">prev</a></td><td ><a href="#POD4">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Arg [1]    : String $classname - The name of the class to require/import
  Example    : $self->inject('DBSQL::DBAdaptor');
  Description: Requires and imports the methods for the classname provided,
               checks the symbol table so that it doesnot re-require modules
               that have already been required.
  Returntype : true on success
  Exceptions : Warns to standard error if module fails to compile
  Caller     : internal</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_sort_chromosomes" id="_pod_sort_chromosomes"></a><a name="POD4" id="POD4"></a>sort_chromosomes</td><td ><a href="#CODE8">code</a></td><td ><a href="#POD3">prev</a></td><td ><a href="#POD5">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Arg[1]      : (optional) Hashref $chr_hashref - Hashref with chr_name as keys
  Example     : my $chr = { '6-COX' => 1, '1' => 1, 'X' => 1 };
                my @sorted = $support->sort_chromosomes($chr);
  Description : Sorts chromosomes in an intuitive way (numerically, then
                alphabetically). If no chromosome hashref is passed, it's
                retrieve by calling $self->get_chrlength()
  Return type : List - sorted chromosome names
  Exceptions  : thrown if no hashref is provided
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<table id="methDescTitle" width="100%"><tr><td WIDTH="200"><a name="_pod_user_proceed" id="_pod_user_proceed"></a><a name="POD5" id="POD5"></a>user_proceed</td><td ><a href="#CODE9">code</a></td><td ><a href="#POD4">prev</a></td><td ><a href="#POD6">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<table id="methDescArea" width="100%"><tr><td><pre id="podParagraph">  Arg[1]      : (optional) String $text - notification text to present to user
  Example     : # run a code snipped conditionally
                if ($support->user_proceed("Run the next code snipped?")) {
                    # run some code
                }

                # exit if requested by user
                exit unless ($support->user_proceed("Want to continue?"));
  Description : If running interactively, the user is asked if he wants to
                perform a script action. If he doesn't, this section is skipped
                and the script proceeds with the code. When running
                non-interactively, the section is run by default.
  Return type : TRUE to proceed, FALSE to skip.
  Exceptions  : none
  Caller      : general</pre></td></tr></table>
<div id="sep"></div>
<a name="MethCode" id="MethCode"></a>
<div id="mainTitle">Methods code</div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE1" id="CODE1"></a>_by_chr_num</td><td ><a href="#POD1">description</a></td><td >prev</td><td ><a href="#CODE2">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="privSubName">_by_chr_num</span>
{<pre>    <span id="perlKey">my</span> <span id="var">@awords</span> = <span id="perlFunc">split</span> <span id="regExp">/-/</span>, <span id="var">$a</span>;
    <span id="perlKey">my</span> <span id="var">@bwords</span> = <span id="perlFunc">split</span> <span id="regExp">/-/</span>, <span id="var">$b</span>;

    <span id="perlKey">my</span> <span id="var">$anum</span> = <span id="var">$awords</span><span id="braces">[</span>0<span id="braces">]</span>;
    <span id="perlKey">my</span> <span id="var">$bnum</span> = <span id="var">$bwords</span><span id="braces">[</span>0<span id="braces">]</span>;

    <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$anum</span> !~ <span id="regExp">/^[0-9]*$/</span><span id="braces">)</span> <span id="braces">{</span>
        <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$bnum</span> !~ <span id="regExp">/^[0-9]*$/</span><span id="braces">)</span> <span id="braces">{</span>
            <span id="perlKey">return</span> <span id="var">$anum</span> cmp <span id="var">$bnum</span>;
        <span id="braces">}</span> <span id="perlKey">else</span> <span id="braces">{</span>
            <span id="perlKey">return</span> 1;
        <span id="braces">}</span>
    <span id="braces">}</span>
    <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$bnum</span> !~ <span id="regExp">/^[0-9]*$/</span><span id="braces">)</span> <span id="braces">{</span>
        <span id="perlKey">return</span> -1;
    <span id="braces">}</span>

    <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$anum</span> &lt;=&gt; <span id="var">$bnum</span><span id="braces">)</span> <span id="braces">{</span>
        <span id="perlKey">return</span> <span id="var">$anum</span> &lt;=&gt; <span id="var">$bnum</span>;
    <span id="braces">}</span> <span id="perlKey">else</span> <span id="braces">{</span>
        <span id="perlKey">if</span> <span id="braces">(</span>$#awords == 0<span id="braces">)</span> <span id="braces">{</span>
            <span id="perlKey">return</span> -1;
        <span id="braces">}</span> <span id="perlKey">elsif</span> <span id="braces">(</span>$#bwords == 0<span id="braces">)</span> <span id="braces">{</span>
            <span id="perlKey">return</span> 1;
        <span id="braces">}</span> <span id="perlKey">else</span> <span id="braces">{</span>
            <span id="perlKey">return</span> <span id="var">$awords</span><span id="braces">[</span>1<span id="braces">]</span> cmp <span id="var">$bwords</span><span id="braces">[</span>1<span id="braces">]</span>;
        <span id="braces">}</span>
    <span id="braces">}</span></pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE2" id="CODE2"></a>commify</td><td ><a href="#POD2">description</a></td><td ><a href="#CODE1">prev</a></td><td ><a href="#CODE3">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">commify</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$num</span> = <span id="perlFunc">shift</span>;

  <span id="var">$num</span> = <span id="perlFunc">reverse</span><span id="braces">(</span><span id="var">$num</span><span id="braces">)</span>;
  <span id="var">$num</span> =~ <span id="regExp">s/(\d\d\d)(?=\d)(?!\d*\.)/</span><span id="var">$1</span><span id="regExp">,/g</span>;

  <span id="perlKey">return</span> <span id="perlFunc">scalar</span> <span id="perlFunc">reverse</span> <span id="var">$num</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE3" id="CODE3"></a>directory_hash</td><td >description</td><td ><a href="#CODE2">prev</a></td><td ><a href="#CODE4">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">directory_hash</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$filename</span> = <span id="perlFunc">shift</span>;

  <span id="perlKey">my</span> <span id="braces">(</span><span id="var">@md5</span><span id="braces">)</span> = <span id="method">md5_hex</span><span id="braces">(</span><span id="var">$filename</span><span id="braces">)</span> =~ <span id="regExp">/\G(..)/g</span>;
  <span id="perlKey">return</span> <span id="perlFunc">join</span><span id="braces">(</span><span id="sqStr">'/'</span>, <span id="var">@md5</span><span id="braces">[</span>0..2<span id="braces">]</span><span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE4" id="CODE4"></a>dynamic_use</td><td >description</td><td ><a href="#CODE3">prev</a></td><td ><a href="#CODE5">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">dynamic_use</span>
{<pre>  <span id="perlKey">return</span> <span id="method">inject</span><span id="braces">(</span><span id="var">@_</span><span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE5" id="CODE5"></a>inject</td><td ><a href="#POD3">description</a></td><td ><a href="#CODE4">prev</a></td><td ><a href="#CODE6">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">inject</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$classname</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">my</span> <span id="braces">(</span><span id="var">$parent_namespace</span>, <span id="var">$module</span><span id="braces">)</span> = <span id="var">$classname</span> =~<span id="regExp">/^(.*::)(.*)$/</span> ?
                                      <span id="braces">(</span><span id="var">$1</span>,<span id="var">$2</span><span id="braces">)</span> : <span id="braces">(</span><span id="sqStr">'::'</span>, <span id="var">$classname</span><span id="braces">)</span>;
  <span id="perlFunc">no</span> strict <span id="sqStr">'refs'</span>;

  <span id="comment"># return if module has already been imported</span><br />  <span id="perlKey">return</span> 1 <span id="perlKey">if</span> <span id="var">$parent_namespace</span>-&gt;<span id="braces">{</span><span id="var">$module</span>.<span id="sqStr">'::'</span><span id="braces">}</span>;
  
  <span id="perlKey">eval</span> <span id="dqStr">"require <span id="var">$classname</span>"</span>;
  <span id="perlFunc">die</span><span id="braces">(</span><span id="dqStr">"Failed to require <span id="var">$classname</span>: $@"</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span>$@<span id="braces">)</span>;

  <span id="var">$classname</span>-&gt;<span id="perlFunc">import</span><span id="braces">(</span><span id="braces">)</span>;
  
  <span id="perlKey">return</span> 1;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE6" id="CODE6"></a>parse_bytes</td><td >description</td><td ><a href="#CODE5">prev</a></td><td ><a href="#CODE7">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">parse_bytes</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$bytes</span> = <span id="perlFunc">shift</span>;

  <span id="perlKey">my</span> <span id="var">@suffixes</span> = <span id="perlFunc">qw</span><span id="braces">(</span>bytes kb Mb Gb Tb<span id="braces">)</span>;

  <span id="perlKey">my</span> <span id="var">$length</span> = <span id="perlFunc">length</span><span id="braces">(</span><span id="var">$bytes</span><span id="braces">)</span>;
  <span id="perlKey">my</span> <span id="var">$order</span> = <span id="perlFunc">int</span><span id="braces">(</span><span id="braces">(</span><span id="var">$length</span>-1<span id="braces">)</span>/3);<br />
  <span id="perlKey">my</span> <span id="var">$parsed</span> = <span id="perlFunc">sprintf</span><span id="braces">(</span><span id="sqStr">'%.1f'</span>, <span id="var">$bytes</span><span id="regExp">/10**(3*</span><span id="var">$order</span>));<br />
  <span id="perlKey">return</span> <span id="dqStr">"<span id="var">$parsed</span> "</span>.<span id="var">$suffixes</span><span id="braces">[</span><span id="var">$order</span><span id="braces">]</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE7" id="CODE7"></a>path_append</td><td >description</td><td ><a href="#CODE6">prev</a></td><td ><a href="#CODE8">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">path_append</span>
{<pre>  <span id="perlKey">my</span> <span id="var">$path1</span> = <span id="perlFunc">shift</span>;
  <span id="perlKey">my</span> <span id="var">$path2</span> = <span id="perlFunc">shift</span>;

  <span id="comment"># default to current directory</span><br />  <span id="var">$path1</span> = <span id="sqStr">'.'</span> <span id="perlKey">unless</span> <span id="braces">(</span><span id="perlFunc">defined</span><span id="braces">(</span><span id="var">$path1</span><span id="braces">)</span><span id="braces">)</span>;

  <span id="perlKey">my</span> <span id="var">$return_path</span> = <span id="dqStr">"<span id="var">$path1</span>/<span id="var">$path2</span>"</span>;

  <span id="perlKey">unless</span> <span id="braces">(</span>-d <span id="var">$return_path</span><span id="braces">)</span> <span id="braces">{</span>
    <span id="perlFunc">system</span><span id="braces">(</span><span id="dqStr">"mkdir -p <span id="var">$return_path</span>"</span><span id="braces">)</span> == 0 or
      <span id="perlFunc">die</span><span id="braces">(</span><span id="dqStr">"Unable to create directory <span id="var">$return_path</span>: $!\n"</span><span id="braces">)</span>;
  <span id="braces">}</span>
  
  <span id="perlKey">return</span> <span id="var">$return_path</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE8" id="CODE8"></a>sort_chromosomes</td><td ><a href="#POD4">description</a></td><td ><a href="#CODE7">prev</a></td><td ><a href="#CODE9">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">sort_chromosomes</span>
{<pre>    <span id="perlKey">my</span> <span id="var">@chromosomes</span> = <span id="var">@_</span>;
    
    <span id="perlKey">return</span> <span id="braces">(</span><span id="perlFunc">sort</span> _by_chr_num <span id="var">@chromosomes</span><span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE9" id="CODE9"></a>user_proceed</td><td ><a href="#POD5">description</a></td><td ><a href="#CODE8">prev</a></td><td >next</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">user_proceed</span>
{<pre>  <span id="perlKey">my</span> <span id="braces">(</span><span id="var">$text</span>, <span id="var">$interactive</span>, <span id="var">$default</span><span id="braces">)</span> = <span id="var">@_</span>;

  <span id="perlKey">unless</span> <span id="braces">(</span><span id="perlFunc">defined</span><span id="braces">(</span><span id="var">$default</span><span id="braces">)</span><span id="braces">)</span> <span id="braces">{</span>
    <span id="perlFunc">die</span><span id="braces">(</span><span id="dqStr">"Need a default answer for non-interactive runs."</span><span id="braces">)</span>;
  <span id="braces">}</span>

  <span id="perlKey">my</span> <span id="var">$input</span>;

  <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$interactive</span><span id="braces">)</span> <span id="braces">{</span>
    <span id="perlFunc">print</span> <span id="dqStr">"$text\n"</span> <span id="perlKey">if</span> <span id="var">$text</span>;
    <span id="perlFunc">print</span> <span id="dqStr">"[y/N] "</span>;
  
    <span id="var">$input</span> = <span id="perlFunc">lc</span><span id="braces">(</span>&lt;&gt;<span id="braces">)</span>;
    <span id="perlFunc">chomp</span> <span id="var">$input</span>;
  <span id="braces">}</span> <span id="perlKey">else</span> <span id="braces">{</span>
    <span id="var">$input</span> = <span id="var">$default</span>;
  <span id="braces">}</span>
  
  <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$input</span> <span id="perlKey">eq</span> <span id="sqStr">'y'</span><span id="braces">)</span> <span id="braces">{</span>
    <span id="perlKey">return</span><span id="braces">(</span>1<span id="braces">)</span>;
  <span id="braces">}</span> <span id="perlKey">else</span> <span id="braces">{</span>
    <span id="perlFunc">print</span> <span id="dqStr">"Skipping.\n"</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="var">$interactive</span><span id="braces">)</span>;
    <span id="perlKey">return</span><span id="braces">(</span>0<span id="braces">)</span>;
  <span id="braces">}</span></pre>}</td></div>
<div id="sep"></div>
<a name="General" id="General"></a>
<div id="mainTitle">General documentation</div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_CONTACT" id="_pod_CONTACT"></a>CONTACT</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Please email comments or questions to the public INB
  developers list at <<a href="mailto:inb-tecnico@lists.cnio.es" id="podEmail">inb-tecnico@lists.cnio.es</a>&gt;.<br />
  Questions may also be sent to the developer, 
  Jose Manuel Rodriguez <<a href="mailto:jmrodriguez@cnio.es" id="podEmail">jmrodriguez@cnio.es</a>&gt;.</pre></div>
<div id="sep"></div>
</body>
</html>
