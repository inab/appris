<head>
<!-- Generated by perlmod2www.pl -->
<title>
ProCDS documentation.
</title>
<link rel="stylesheet" type="text/css" href="../perl.css">
</head>
<body bgcolor="white">
<span id="modRootPath">APPRIS::Utils</span>
<span id="modName">ProCDS</span>
<div id="sep"></div>
<a name="TOP" id="TOP"></a>
<table id="daArea" width="100%"><tr><td id="daEntry" ><a href="#SUMMARY">Summary</a></td><td id="daEntry" ><a href="#libs">Included libraries</a></td><td id="daEntry" ><a href="#vardefs">Package variables</a></td><td id="daEntry" ><a href="#SYNOPSIS">Synopsis</a></td><td id="daEntry" ><a href="#DESCRIPTION">Description</a></td><td id="daEntry" ><a href="#General">General documentation</a></td><td id="daEntry" ><a href="#Methods">Methods</a></td></tr></table>
<div id="sep"></div>
<div id="descTitle">Summary</div>
<div id="descArea"><B>APPRIS::Utils::ProCDS</B> - Utility functions for protein handling</div>
<div id="sep"></div>
<a name="vardefs" id="vardefs"></a><div id="descTitle">Package variables</div>
<div id="descArea"><div id="libEntry">No package variables defined.</div>
</div>
<div id="sep"></div>
<div id="descTitle">Included modules</div>
<div id="descArea"><div id="libEntry"><span id="use"><a href="../CDS.html">APPRIS::CDS</a></span> </div>
<div id="libEntry"><span id="use"><a href="../ProCDS.html">APPRIS::ProCDS</a></span> </div>
<div id="libEntry"><span id="use"><a href="../Exporter.html">Exporter</a></span></div>
</div>
<div id="sep"></div>
<a name="libs" id="libs"></a>
<div id="descTitle">Inherit</div>
<div id="descArea"><span id="isa"><a href="../Exporter.html">Exporter</a></span> </div>
<div id="sep"></div>
<a name="SYNOPSIS" id="SYNOPSIS"></a>
<div id="descTitle">Synopsis</div>
<div id="descArea"><pre id="podParagraph">  use APPRIS::Utils::ProCDS
    qw(
       get_protein_cds_sequence
     );

  or to get all methods just

  use APPRIS::Utils::ProCDS;

  eval { get_protein_cds_sequence(cds_list) };
  if ($@) {
    print "Caught exception:\n$@";
  }</pre>
</div>
<div id="sep"></div>
<a name="DESCRIPTION" id="DESCRIPTION"></a>
<div id="descTitle">Description</div>
<div id="descArea">The functions exported by this package provide a set of useful methods <br />to handle files.
</div>
<div id="sep"></div>
<a name="Methods" id="Methods"></a>
<div id="descTitle">Methods</div>
<table id="methIndArea" width="100%" cellspacing="0"><tr><td id="methIndEntry">get_cds_from_residue($$)</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE1">Code</a></td></tr>
<tr><td id="methIndEntry">get_cds_init_length($$$$)</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE2">Code</a></td></tr>
<tr><td id="methIndEntry">get_contained_cds($$$)</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE3">Code</a></td></tr>
<tr><td id="methIndEntry">get_protein_cds_sequence($;$)</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE4">Code</a></td></tr>
<tr><td id="methIndEntry">sort_cds($$)</td><td id="methIndEntry"><div id="error">No description</div></td><td id="methIndEntry"><a href="#CODE5">Code</a></td></tr>
</table>
<div id="sep"></div>
<a name="MethDesc" id="MethDesc"></a>
<div id="mainTitle">Methods description</div>
<div id="sep"></div>
<div id="error">None available.</div>
<div id="sep"></div>
<a name="MethCode" id="MethCode"></a>
<div id="mainTitle">Methods code</div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE1" id="CODE1"></a>get_cds_from_residue($$)</td><td >description</td><td >prev</td><td ><a href="#CODE2">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">get_cds_from_residue($$)</span>
{<pre>
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$transcript</span>, <span id="var">$residue</span><span id="braces">)</span> = <span id="var">@_</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$protein_cds</span><span id="braces">)</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$residue_start</span><span id="braces">)</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$residue_end</span><span id="braces">)</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$trans_start</span><span id="braces">)</span> = <span id="var">$transcript</span>-&gt;<span id="method">start</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$trans_end</span><span id="braces">)</span> = <span id="var">$transcript</span>-&gt;<span id="method">end</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$trans_strand</span><span id="braces">)</span> = <span id="var">$transcript</span>-&gt;<span id="method">strand</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$trans_length</span><span id="braces">)</span> = <span id="perlFunc">length</span><span id="braces">(</span><span id="var">$transcript</span>-&gt;<span id="method">sequence</span><span id="braces">)</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_list</span><span id="braces">)</span> = <span id="var">$transcript</span>-&gt;<span id="method">translate</span>-&gt;<span id="method">cds</span>;

<span id="comment">#print STDERR &quot;TRANSCRIPT_ID:&quot;.$transcript-&gt;stable_id.&quot;\n&quot;;</span><br /><span id="comment">#print STDERR &quot;TRANS_LENGTH: $trans_length\n&quot;;	</span><br />
	<span id="comment"># Sort the cds depending orientation from transcript</span><br />	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$sort_cds_list</span><span id="braces">)</span> = <span id="method">sort_cds</span><span id="braces">(</span><span id="var">$cds_list</span>, <span id="var">$trans_strand</span><span id="braces">)</span>;

	<span id="comment"># Start transcript residue</span><br />	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$transcript_nucleotide_relative_position</span><span id="braces">)</span> = 0;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$j</span><span id="braces">)</span> = 1; <span id="comment"># First residue</span><br />	<span id="perlKey">while</span> <span id="braces">(</span> <span id="var">$j</span> &lt;= 3 <span id="braces">)</span>
	<span id="braces">{</span>
		<span id="var">$transcript_nucleotide_relative_position</span> = <span id="braces">(</span><span id="var">$residue</span>-1<span id="braces">)</span>*3 + <span id="var">$j</span>;

<span id="comment">#print STDERR &quot;J:$transcript_nucleotide_relative_position = ($residue-1)*3 + $j\n&quot;;</span><br />		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_length_accumulate</span><span id="braces">)</span> = 0;
		<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$cds</span> <span id="braces">(</span>@<span id="braces">{</span><span id="var">$sort_cds_list</span><span id="braces">}</span><span id="braces">)</span>
		<span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_start</span><span id="braces">)</span> = <span id="var">$cds</span>-&gt;<span id="method">start</span>;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_end</span><span id="braces">)</span> = <span id="var">$cds</span>-&gt;<span id="method">end</span>;

			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_init</span>, <span id="var">$cds_length</span><span id="braces">)</span> = <span id="method">get_cds_init_length</span><span id="braces">(</span><span id="var">$cds</span>, <span id="var">$trans_start</span>, <span id="var">$trans_end</span>, <span id="var">$trans_strand</span><span id="braces">)</span>;			
			<span id="var">$cds_length_accumulate</span> += <span id="var">$cds_length</span>;
<span id="comment">#print STDERR &quot;CSD: start: $cds_start end: $cds_end init: $cds_init length: $cds_length: accum: $cds_length_accumulate\n&quot;;	</span><br /><span id="comment">#print STDERR &quot;CSD: cond: ($cds_length_accumulate / $transcript_nucleotide_relative_position) &gt;= 1\n&quot;;	</span><br />			<span id="perlKey">if</span> <span id="braces">(</span> <span id="braces">(</span><span id="var">$cds_length_accumulate</span> <span id="regExp">/ </span><span id="var">$transcript_nucleotide_relative_position</span>) &gt;= 1 )<br />			{<br />#print STDERR &quot;CSD: cond: si\n&quot;;<br />				<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$relative_position_from_exon</span><span id="braces">)</span> = <span id="var">$cds_length_accumulate</span> - <span id="var">$cds_length</span>;
				<span id="perlKey">if</span> <span id="braces">(</span><span id="var">$j</span> == 1<span id="braces">)</span>
				<span id="braces">{</span>
					<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$trans_strand</span> <span id="perlKey">eq</span> <span id="sqStr">'-'</span> <span id="braces">)</span>
					<span id="braces">{</span>
						<span id="var">$residue_start</span> = <span id="var">$cds_end</span> - <span id="braces">(</span><span id="var">$transcript_nucleotide_relative_position</span> - <span id="var">$relative_position_from_exon</span><span id="braces">)</span> +1;
<span id="comment">#print STDERR &quot;RES_START:$residue:$residue_start = $cds_end - ($transcript_nucleotide_relative_position-$relative_position_from_exon) +1\n&quot;;</span><br />					<span id="braces">}</span> <span id="perlKey">else</span> <span id="braces">{</span>
						<span id="var">$residue_start</span> = <span id="var">$cds_start</span> + <span id="braces">(</span><span id="var">$transcript_nucleotide_relative_position</span> - <span id="var">$relative_position_from_exon</span><span id="braces">)</span> -1;
<span id="comment">#print STDERR &quot;RES_START:$residue:$residue_start = $cds_start + ($transcript_nucleotide_relative_position-$relative_position_from_exon) -1\n&quot;;</span><br />					<span id="braces">}</span>	
					<span id="perlKey">last</span>;				
				<span id="braces">}</span>
				<span id="perlKey">elsif</span> <span id="braces">(</span><span id="var">$j</span> == 3<span id="braces">)</span>
				<span id="braces">{</span>
					<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$trans_strand</span> <span id="perlKey">eq</span> <span id="sqStr">'-'</span> <span id="braces">)</span>
					<span id="braces">{</span>
						<span id="var">$residue_end</span> = <span id="var">$cds_end</span> - <span id="braces">(</span><span id="var">$transcript_nucleotide_relative_position</span> - <span id="var">$relative_position_from_exon</span><span id="braces">)</span> +1;
<span id="comment">#print STDERR &quot;RES_END:$residue:$residue_end = $cds_end - ($transcript_nucleotide_relative_position-$relative_position_from_exon) +1\n&quot;;						</span><br />					<span id="braces">}</span> <span id="perlKey">else</span> <span id="braces">{</span>
						<span id="var">$residue_end</span> = <span id="var">$cds_start</span> + <span id="braces">(</span><span id="var">$transcript_nucleotide_relative_position</span> - <span id="var">$relative_position_from_exon</span><span id="braces">)</span> -1;
<span id="comment">#print STDERR &quot;RES_END:$residue:$residue_end = $cds_start + ($transcript_nucleotide_relative_position-$relative_position_from_exon) -1\n&quot;;</span><br />					<span id="braces">}</span>			
					<span id="perlKey">last</span>;
				<span id="braces">}</span>
			<span id="braces">}</span>
		<span id="braces">}</span>
		<span id="var">$j</span> = <span id="var">$j</span>+2; <span id="comment"># Third transcrip residue for aminoacid</span><br />	<span id="braces">}</span>
<span id="comment">#print STDERR &quot;FRAMESHIFT: $transcript_nucleotide_relative_position = ($trans_length +1) and !(defined $residue_end)\n&quot;;	</span><br />	<span id="comment"># In the case that residue posotion is within &quot;frameshift&quot; (Start-End codon does not found)</span><br />	<span id="perlKey">if</span> <span id="braces">(</span><span id="var">$transcript_nucleotide_relative_position</span> = <span id="braces">(</span><span id="var">$trans_length</span> +1<span id="braces">)</span> and !<span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$residue_end</span><span id="braces">)</span><span id="braces">)</span> <span id="braces">{</span>
		<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$trans_strand</span> <span id="perlKey">eq</span> <span id="sqStr">'-'</span> <span id="braces">)</span>
		<span id="braces">{</span>
			<span id="var">$residue_end</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="perlFunc">scalar</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$sort_cds_list</span><span id="braces">}</span><span id="braces">)</span>-1<span id="braces">]</span>-&gt;<span id="method">start</span>;
			<span id="var">$residue_start</span> = <span id="var">$residue_end</span> - 3;
<span id="comment">#print STDERR &quot;RES_END:$residue:$residue_end\n&quot;;</span><br />		<span id="braces">}</span> <span id="perlKey">else</span> <span id="braces">{</span>
			<span id="var">$residue_end</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="perlFunc">scalar</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$sort_cds_list</span><span id="braces">}</span><span id="braces">)</span>-1<span id="braces">]</span>-&gt;<span id="method">end</span>;
			<span id="var">$residue_start</span> = <span id="var">$residue_end</span> - 3;
<span id="comment">#print STDERR &quot;RES_END:$residue:$residue_end\n&quot;;</span><br />		<span id="braces">}</span>			
	<span id="braces">}</span>
<span id="comment">#print STDERR &quot;RES_START:$residue_start RES_END:$residue:$residue_end\n&quot;;	</span><br />	<span id="perlKey">if</span> <span id="braces">(</span> <span id="perlFunc">defined</span> <span id="var">$residue_start</span> and <span id="perlFunc">defined</span> <span id="var">$residue_end</span> <span id="braces">)</span>
	<span id="braces">{</span>
		<span id="var">$protein_cds</span> = <span id="module"><a href="../CDS.html">APPRIS::CDS</a></span>-&gt;<span id="perlKey">new</span><span id="braces">(</span>
						-start		=&gt; <span id="var">$residue_start</span>,
						-end		=&gt; <span id="var">$residue_end</span>,
						-strand		=&gt; <span id="var">$trans_strand</span>,
		<span id="braces">)</span>;
	<span id="braces">}</span>
	<span id="perlKey">return</span> <span id="var">$protein_cds</span>;
	
<span id="braces">}</span> <span id="comment"># End get_cds_from_residue</span><br /></pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE2" id="CODE2"></a>get_cds_init_length($$$$)</td><td >description</td><td ><a href="#CODE1">prev</a></td><td ><a href="#CODE3">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">get_cds_init_length($$$$)</span>
{<pre>
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds</span>, <span id="var">$trans_start</span>, <span id="var">$trans_end</span>, <span id="var">$trans_strand</span><span id="braces">)</span> = <span id="var">@_</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$init</span>,<span id="var">$length</span><span id="braces">)</span>;

	<span id="perlKey">if</span> <span id="braces">(</span> <span id="var">$trans_strand</span> <span id="perlKey">eq</span> <span id="sqStr">'-'</span> <span id="braces">)</span>
	<span id="braces">{</span>
		<span id="var">$init</span> = <span id="perlFunc">abs</span><span id="braces">(</span><span id="var">$cds</span>-&gt;<span id="method">end</span> - <span id="var">$trans_end</span><span id="braces">)</span>;
		<span id="var">$length</span> = <span id="var">$cds</span>-&gt;<span id="method">end</span> - <span id="var">$cds</span>-&gt;<span id="method">start</span> +1;
	<span id="braces">}</span>
	<span id="perlKey">else</span>
	<span id="braces">{</span>
		<span id="var">$init</span> = <span id="var">$cds</span>-&gt;<span id="method">start</span> - <span id="var">$trans_start</span>;
		<span id="var">$length</span> = <span id="var">$cds</span>-&gt;<span id="method">end</span> - <span id="var">$cds</span>-&gt;<span id="method">start</span> +1;
	<span id="braces">}</span>	
	<span id="perlKey">return</span> <span id="braces">(</span><span id="var">$init</span>,<span id="var">$length</span><span id="braces">)</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE3" id="CODE3"></a>get_contained_cds($$$)</td><td >description</td><td ><a href="#CODE2">prev</a></td><td ><a href="#CODE4">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">get_contained_cds($$$)</span>
{<pre>
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_list</span>, <span id="var">$residue_start</span>, <span id="var">$residue_end</span><span id="braces">)</span> = <span id="var">@_</span>;
	
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$contained_cds</span><span id="braces">)</span>;

	<span id="comment"># Sort the exons depending orientation from transcript</span><br />	<span id="comment"># For that we take the orientation of the first CDS</span><br />	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$trans_strand</span><span id="braces">)</span> = <span id="var">$cds_list</span>-&gt;<span id="braces">[</span>0<span id="braces">]</span>-&gt;<span id="method">strand</span>;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$sort_cds_list</span><span id="braces">)</span> = <span id="method">sort_cds</span><span id="braces">(</span><span id="var">$cds_list</span>, <span id="var">$trans_strand</span><span id="braces">)</span>;

	<span id="perlKey">for</span> <span id="braces">(</span><span id="perlKey">my</span> <span id="var">$i</span> = 0; <span id="var">$i</span> &lt; <span id="perlFunc">scalar</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$sort_cds_list</span><span id="braces">}</span><span id="braces">)</span>; <span id="var">$i</span>++<span id="braces">)</span> <span id="braces">{</span>
		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_start</span><span id="braces">)</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="var">$i</span><span id="braces">]</span>-&gt;<span id="method">start</span>;
		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_end</span><span id="braces">)</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="var">$i</span><span id="braces">]</span>-&gt;<span id="method">end</span>;
		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_strand</span><span id="braces">)</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="var">$i</span><span id="braces">]</span>-&gt;<span id="method">strand</span>;
		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_phase</span><span id="braces">)</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="var">$i</span><span id="braces">]</span>-&gt;<span id="method">phase</span>;

		<span id="comment"># within one CDS</span><br />		<span id="perlKey">if</span> <span id="braces">(</span><span id="var">$residue_start</span> &gt;= <span id="var">$cds_start</span> and <span id="var">$residue_end</span> &lt;= <span id="var">$cds_end</span><span id="braces">)</span> <span id="braces">{</span>
			<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$contained_cds</span><span id="braces">}</span>,
				<span id="module"><a href="../CDS.html">APPRIS::CDS</a></span>-&gt;<span id="perlKey">new</span>
				<span id="braces">(</span>
					-start		=&gt; <span id="var">$cds_start</span>,
					-end		=&gt; <span id="var">$cds_end</span>,
					-strand		=&gt; <span id="var">$cds_strand</span>,
					-phase		=&gt; <span id="var">$cds_phase</span>
				<span id="braces">)</span>
			<span id="braces">)</span>;
			<span id="perlKey">last</span>;			
		<span id="braces">}</span>
		<span id="comment"># within several CDS's (strand +)</span><br />		<span id="perlKey">elsif</span> <span id="braces">(</span><span id="var">$cds_strand</span> <span id="perlKey">eq</span> <span id="sqStr">'+'</span> and <span id="var">$residue_start</span> &lt;= <span id="var">$cds_end</span> and <span id="var">$residue_end</span> &gt; <span id="var">$cds_end</span><span id="braces">)</span> <span id="braces">{</span>
			<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$contained_cds</span><span id="braces">}</span>,
				<span id="module"><a href="../CDS.html">APPRIS::CDS</a></span>-&gt;<span id="perlKey">new</span>
				<span id="braces">(</span>
					-start		=&gt; <span id="var">$cds_start</span>,
					-end		=&gt; <span id="var">$cds_end</span>,
					-strand		=&gt; <span id="var">$cds_strand</span>,
					-phase		=&gt; <span id="var">$cds_phase</span>
				<span id="braces">)</span>
			<span id="braces">)</span>;
			
			<span id="perlKey">for</span> <span id="braces">(</span><span id="perlKey">my</span> <span id="var">$j</span> = <span id="var">$i</span>+1; <span id="var">$j</span> &lt; <span id="perlFunc">scalar</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$sort_cds_list</span><span id="braces">}</span><span id="braces">)</span>; <span id="var">$j</span>++<span id="braces">)</span> <span id="braces">{</span>
				<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$next_cds_start</span><span id="braces">)</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="var">$j</span><span id="braces">]</span>-&gt;<span id="method">start</span>;
				<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$next_cds_end</span><span id="braces">)</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="var">$j</span><span id="braces">]</span>-&gt;<span id="method">end</span>;
				<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$next_cds_strand</span><span id="braces">)</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="var">$j</span><span id="braces">]</span>-&gt;<span id="method">strand</span>;
				<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$next_cds_phase</span><span id="braces">)</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="var">$j</span><span id="braces">]</span>-&gt;<span id="method">phase</span>;

				<span id="perlKey">if</span> <span id="braces">(</span><span id="var">$residue_end</span> &gt;= <span id="var">$next_cds_start</span> and <span id="var">$residue_end</span> &gt;= <span id="var">$next_cds_end</span><span id="braces">)</span> <span id="braces">{</span>
					<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$contained_cds</span><span id="braces">}</span>,
						<span id="module"><a href="../CDS.html">APPRIS::CDS</a></span>-&gt;<span id="perlKey">new</span>
						<span id="braces">(</span>
							-start		=&gt; <span id="var">$next_cds_start</span>,
							-end		=&gt; <span id="var">$next_cds_end</span>,
							-strand		=&gt; <span id="var">$next_cds_strand</span>,
							-phase		=&gt; <span id="var">$next_cds_phase</span>
						<span id="braces">)</span>
					<span id="braces">)</span>;
				<span id="braces">}</span>
				<span id="perlKey">elsif</span><span id="braces">(</span><span id="var">$residue_end</span> &gt;= <span id="var">$next_cds_start</span> and <span id="var">$residue_end</span> &lt;= <span id="var">$next_cds_end</span><span id="braces">)</span> <span id="braces">{</span>
					<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$contained_cds</span><span id="braces">}</span>,
						<span id="module"><a href="../CDS.html">APPRIS::CDS</a></span>-&gt;<span id="perlKey">new</span>
						<span id="braces">(</span>
							-start		=&gt; <span id="var">$next_cds_start</span>,
							-end		=&gt; <span id="var">$next_cds_end</span>,
							-strand		=&gt; <span id="var">$next_cds_strand</span>,
							-phase		=&gt; <span id="var">$next_cds_phase</span>
						<span id="braces">)</span>
					<span id="braces">)</span>;					
					<span id="perlKey">last</span>;
				<span id="braces">}</span>
			<span id="braces">}</span>
			<span id="perlKey">last</span>;			
		<span id="braces">}</span>
		<span id="comment"># within several CDS's (strand -)</span><br />		<span id="perlKey">elsif</span><span id="braces">(</span><span id="var">$cds_strand</span> <span id="perlKey">eq</span> <span id="sqStr">'-'</span> and <span id="var">$residue_start</span> &lt;= <span id="var">$cds_start</span> and <span id="var">$residue_end</span> &gt;= <span id="var">$cds_start</span><span id="braces">)</span> <span id="braces">{</span>
			<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$contained_cds</span><span id="braces">}</span>,
				<span id="module"><a href="../CDS.html">APPRIS::CDS</a></span>-&gt;<span id="perlKey">new</span>
				<span id="braces">(</span>
					-start		=&gt; <span id="var">$cds_start</span>,
					-end		=&gt; <span id="var">$cds_end</span>,
					-strand		=&gt; <span id="var">$cds_strand</span>,
					-phase		=&gt; <span id="var">$cds_phase</span>
				<span id="braces">)</span>
			<span id="braces">)</span>;					
			
			<span id="perlKey">for</span> <span id="braces">(</span><span id="perlKey">my</span> <span id="var">$j</span> = <span id="var">$i</span>+1; <span id="var">$j</span> &lt; <span id="perlFunc">scalar</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$sort_cds_list</span><span id="braces">}</span><span id="braces">)</span>; <span id="var">$j</span>++<span id="braces">)</span> <span id="braces">{</span>
				<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$next_cds_start</span><span id="braces">)</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="var">$j</span><span id="braces">]</span>-&gt;<span id="method">start</span>;
				<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$next_cds_end</span><span id="braces">)</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="var">$j</span><span id="braces">]</span>-&gt;<span id="method">end</span>;
				<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$next_cds_strand</span><span id="braces">)</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="var">$j</span><span id="braces">]</span>-&gt;<span id="method">strand</span>;
				<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$next_cds_phase</span><span id="braces">)</span> = <span id="var">$sort_cds_list</span>-&gt;<span id="braces">[</span><span id="var">$j</span><span id="braces">]</span>-&gt;<span id="method">phase</span>;

				<span id="perlKey">if</span> <span id="braces">(</span><span id="var">$residue_start</span> &lt;= <span id="var">$next_cds_end</span><span id="braces">)</span> <span id="braces">{</span>
					<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$contained_cds</span><span id="braces">}</span>,
						<span id="module"><a href="../CDS.html">APPRIS::CDS</a></span>-&gt;<span id="perlKey">new</span>
						<span id="braces">(</span>
							-start		=&gt; <span id="var">$next_cds_start</span>,
							-end		=&gt; <span id="var">$next_cds_end</span>,
							-strand		=&gt; <span id="var">$next_cds_strand</span>,
							-phase		=&gt; <span id="var">$next_cds_phase</span>
						<span id="braces">)</span>
					<span id="braces">)</span>;					
				<span id="braces">}</span>
			<span id="braces">}</span>
			<span id="perlKey">last</span>;			
		<span id="braces">}</span>
	<span id="braces">}</span>	
	
	<span id="perlKey">return</span> <span id="var">$contained_cds</span>;
		
<span id="braces">}</span> <span id="comment"># End get_contained_cds</span><br /></pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE4" id="CODE4"></a>get_protein_cds_sequence($;$)</td><td >description</td><td ><a href="#CODE3">prev</a></td><td ><a href="#CODE5">next</a></td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">get_protein_cds_sequence($;$)</span>
{<pre>
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_list</span>, <span id="var">$sequence</span><span id="braces">)</span> = <span id="var">@_</span>;

	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$protein_cds_list</span><span id="braces">)</span>;
	
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$pro_cds_start</span><span id="braces">)</span> = 0;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$pro_cds_end</span><span id="braces">)</span> = 0;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$start_phase</span><span id="braces">)</span> = 0;
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$end_phase</span><span id="braces">)</span> = 0;

	<span id="perlKey">foreach</span> <span id="perlKey">my</span> <span id="var">$cds</span> <span id="braces">(</span>@<span id="braces">{</span><span id="var">$cds_list</span><span id="braces">}</span><span id="braces">)</span> <span id="braces">{</span>

		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$accumulate</span><span id="braces">)</span> = 0;
		<span id="var">$start_phase</span> = <span id="var">$end_phase</span>;
		<span id="perlKey">if</span><span id="braces">(</span><span id="var">$start_phase</span> == 1<span id="braces">)</span> <span id="braces">{</span>
			<span id="var">$accumulate</span> = 2;
		<span id="braces">}</span>
		<span id="perlKey">elsif</span><span id="braces">(</span><span id="var">$start_phase</span> == 2<span id="braces">)</span> <span id="braces">{</span>
			<span id="var">$accumulate</span> = 1;
		<span id="braces">}</span>
		<span id="perlKey">else</span> <span id="braces">{</span>
			<span id="var">$accumulate</span> = 0;
		<span id="braces">}</span>
		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_start</span><span id="braces">)</span> = <span id="var">$cds</span>-&gt;<span id="method">start</span>;
		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_end</span><span id="braces">)</span> = <span id="var">$cds</span>-&gt;<span id="method">end</span>;
				
		<span id="var">$pro_cds_start</span> = <span id="var">$pro_cds_end</span> + 1;
		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$pro_cds_end_div</span><span id="braces">)</span> = <span id="braces">(</span><span id="perlFunc">abs</span><span id="braces">(</span><span id="var">$cds_end</span> - <span id="var">$cds_start</span><span id="braces">)</span> + 1 - <span id="var">$accumulate</span><span id="braces">)</span> / 3;<br />		<span id="perlKey">if</span> <span id="braces">(</span><span id="var">$pro_cds_end_div</span> == 0<span id="braces">)</span> <span id="braces">{</span>
			<span id="var">$pro_cds_end</span> = <span id="var">$pro_cds_start</span> + <span id="var">$pro_cds_end_div</span>;
			<span id="var">$end_phase</span> = 0;
		<span id="braces">}</span>
		<span id="perlKey">elsif</span> <span id="braces">(</span><span id="var">$pro_cds_end_div</span> =~ <span id="regExp">/(\d+)\.(\d{2})/</span><span id="braces">)</span> <span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$pro_cds_end_int</span><span id="braces">)</span> = <span id="var">$1</span>;
			<span id="var">$pro_cds_end</span> = <span id="var">$pro_cds_start</span> + <span id="var">$pro_cds_end_int</span>;			
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$pro_cds_end_mod</span><span id="braces">)</span> = <span id="sqStr">'0.'</span>.<span id="var">$2</span>;
			<span id="perlKey">if</span> <span id="braces">(</span><span id="var">$pro_cds_end_mod</span> == <span id="sqStr">'0.33'</span><span id="braces">)</span> <span id="braces">{</span>
				<span id="var">$end_phase</span> = 1;
			<span id="braces">}</span>
			<span id="perlKey">elsif</span> <span id="braces">(</span><span id="var">$pro_cds_end_mod</span> == <span id="sqStr">'0.66'</span><span id="braces">)</span> <span id="braces">{</span>
				<span id="var">$end_phase</span> = 2;
			<span id="braces">}</span>
		<span id="braces">}</span>
		<span id="perlKey">else</span> <span id="braces">{</span>
			<span id="var">$pro_cds_end</span> = <span id="var">$pro_cds_start</span> + <span id="var">$pro_cds_end_div</span> - 1;
			<span id="var">$end_phase</span> = 0;
		<span id="braces">}</span>
		<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$protein_cds</span><span id="braces">)</span> = <span id="module"><a href="../ProCDS.html">APPRIS::ProCDS</a></span>-&gt;<span id="perlKey">new</span><span id="braces">(</span>
											-start				=&gt; <span id="var">$pro_cds_start</span>,
											-end				=&gt; <span id="var">$pro_cds_end</span>,
											-start_phase		=&gt; <span id="var">$start_phase</span>,
											-end_phase			=&gt; <span id="var">$end_phase</span>
										<span id="braces">)</span>;
		<span id="perlKey">if</span> <span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$sequence</span><span id="braces">)</span> <span id="braces">{</span>
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$pro_cds_length</span><span id="braces">)</span> = <span id="braces">(</span><span id="var">$pro_cds_end</span> - <span id="var">$pro_cds_start</span><span id="braces">)</span> + 1;
			<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$pro_seq</span><span id="braces">)</span> = <span id="perlFunc">substr</span><span id="braces">(</span><span id="var">$sequence</span>, <span id="braces">(</span><span id="var">$pro_cds_start</span> - 1<span id="braces">)</span>, <span id="var">$pro_cds_length</span><span id="braces">)</span>;
			<span id="var">$protein_cds</span>-&gt;<span id="method">sequence</span><span id="braces">(</span><span id="var">$pro_seq</span><span id="braces">)</span> <span id="perlKey">if</span> <span id="braces">(</span><span id="perlFunc">defined</span> <span id="var">$pro_seq</span><span id="braces">)</span>;
		<span id="braces">}</span>
		<span id="perlFunc">push</span><span id="braces">(</span>@<span id="braces">{</span><span id="var">$protein_cds_list</span><span id="braces">}</span>, <span id="var">$protein_cds</span><span id="braces">)</span>;
	<span id="braces">}</span>
	
	<span id="perlKey">return</span> <span id="var">$protein_cds_list</span>;</pre>}</td></div>
<div id="sep"></div>
<table id="methCodeTitle" width="100%"><tr><td width="200"><a name="CODE5" id="CODE5"></a>sort_cds($$)</td><td >description</td><td ><a href="#CODE4">prev</a></td><td >next</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="methCodeArea"><td ><span id="sub">sub</span> <span id="subName">sort_cds($$)</span>
{<pre>
	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$cds_list</span>, <span id="var">$strand</span><span id="braces">)</span> = <span id="var">@_</span>;

	<span id="perlKey">my</span> <span id="braces">(</span><span id="var">$sort_cds_list</span><span id="braces">)</span>;

	<span id="comment"># Sort the CDS depending orientation from transcript</span><br />	<span id="perlKey">if</span> <span id="braces">(</span><span id="var">$cds_list</span><span id="braces">)</span> <span id="braces">{</span>
		<span id="perlKey">if</span> <span id="braces">(</span><span id="var">$strand</span> <span id="perlKey">eq</span> <span id="sqStr">'-'</span><span id="braces">)</span> <span id="braces">{</span>
			@<span id="braces">{</span><span id="var">$sort_cds_list</span><span id="braces">}</span>= <span id="perlFunc">sort</span> <span id="braces">{</span> <span id="var">$b</span>-&gt;<span id="method">start</span> &lt;=&gt; <span id="var">$a</span>-&gt;<span id="method">start</span> <span id="braces">}</span> @<span id="braces">{</span><span id="var">$cds_list</span><span id="braces">}</span>;			
		<span id="braces">}</span>
		<span id="perlKey">else</span> <span id="braces">{</span>
			@<span id="braces">{</span><span id="var">$sort_cds_list</span><span id="braces">}</span>= <span id="perlFunc">sort</span> <span id="braces">{</span> <span id="var">$a</span>-&gt;<span id="method">start</span> &lt;=&gt; <span id="var">$b</span>-&gt;<span id="method">start</span> <span id="braces">}</span> @<span id="braces">{</span><span id="var">$cds_list</span><span id="braces">}</span>;				
		<span id="braces">}</span>		
	<span id="braces">}</span>
	<span id="perlKey">return</span> <span id="var">$sort_cds_list</span>;</pre>}</td></div>
<div id="sep"></div>
<a name="General" id="General"></a>
<div id="mainTitle">General documentation</div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_CONTACT" id="_pod_CONTACT"></a>CONTACT</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Please email comments or questions to the public INB
  developers list at <<a href="mailto:inb-tecnico@lists.cnio.es" id="podEmail">inb-tecnico@lists.cnio.es</a>&gt;.<br />
  Questions may also be sent to the developer, 
  Jose Manuel Rodriguez <<a href="mailto:jmrodriguez@cnio.es" id="podEmail">jmrodriguez@cnio.es</a>&gt;.</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_sort_cds" id="_pod_sort_cds"></a>sort_cds</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg [1]    : Listref of APPRIS::CDS $cds_list
  Arg [2]    : (optional) String - the aminoacid sequence 
               that for this peptide
  Example    : use <B>APPRIS::Utils::ProCDS</B> qw(get_protein_cds_sequence);
               get_protein_cds_sequence($cds_list);
  Description: Sort list of CDS depending orientation.
  Returntype : Listref of APPRIS::ProCDS or undef
  Exceptions : none</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_get_protein_cds_sequence" id="_pod_get_protein_cds_sequence"></a>get_protein_cds_sequence</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg [1]    : Listref of APPRIS::CDS $cds_list
  Arg [2]    : (optional) String - the aminoacid sequence 
               that for this peptide
  Example    : use <B>APPRIS::Utils::ProCDS</B> qw(get_protein_cds_sequence);
               get_protein_cds_sequence($cds_list);
  Description: Get the peptide coordinates and sequence from CDS list.
  Returntype : Listref of APPRIS::ProCDS or undef
  Exceptions : none</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_get_contained_cds" id="_pod_get_contained_cds"></a>get_contained_cds</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg [1]    : Listref of APPRIS::CDS $cds_list
  Arg [2]    : Int - the start location of looking region
  Arg [3]    : Int - the end location of looking region  
  Example    : use <B>APPRIS::Utils::ProCDS</B> qw(get_contained_cds);
               get_contained_cds($cds_list,$start,$end);
  Description: Get the CDS list that are within given region
  Returntype : Listref of APPRIS::CDS or undef
  Exceptions : none</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_get_cds_init_length" id="_pod_get_cds_init_length"></a>get_cds_init_length</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg [1]    : Listref of APPRIS::CDS $cds_list
  Arg [2]    : Int - start postion of the transcript
  Arg [3]    : Int - end position of the transcript
  Arg [4]    : Char - '+','-' the strand the transcript is on  
  Example    : use <B>APPRIS::Utils::ProCDS</B> qw(get_cds_init_length);
               get_cds_init_length($cds, $trans_start, $trans_end, $trans_strand);
  Description: Get the init exon and its length depending orientation.
  Returntype : APPRIS::ProCDS or undef
  Exceptions : none</pre></div>
<div id="sep"></div>
<table id="genInfoTitle" width="100%"><tr><td><a name="_pod_get_cds_from_residue" id="_pod_get_cds_from_residue"></a>get_cds_from_residue</td><td align="right"><a href="#TOP">Top</a></td></tr></table>
<div id="genInfoArea"><pre id="podParagraph">  Arg [1]    : APPRIS::Transcript
  Arg [2]    : Int - the aminoacid residue that for this protein
  Example    : use <B>APPRIS::Utils::ProCDS</B> qw(get_cds_from_residue);
               get_cds_from_residue($transcript,$residue);
  Description: Get genomic region from peptide position.
  Returntype : APPRIS::CDS or undef
  Exceptions : none</pre></div>
<div id="sep"></div>
</body>
</html>
