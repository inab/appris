/* cmdline_hmmsearch.h */

/* File autogenerated by gengetopt version 2.12.2  */

#ifndef CMDLINE_HMMSEARCH_H
#define CMDLINE_HMMSEARCH_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "modhmms"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION "0.92"
#endif

struct gengetopt_args_info
{
  char * hmmnamefile_arg;	/* model namefile for models in hmg format.  */
  char * seqnamefile_arg;	/* sequence namefile (for seuences in fasta, smod, msamod or prfmod format).  */
  char * seqformat_arg;	/* format of input sequences (fa=fasta, s=smod, msa=msamod, prf=prfmod).  */
  char * outpath_arg;	/* output directory.  */
  char * freqfile_arg;	/* background frequency file.  */
  char * smxfile_arg;	/* substitution matrix file.  */
  char * replfile_arg;	/* replacement letter file.  */
  char * priorfile_arg;	/* sequence prior file (for msa input files).  */
  char * nullfile_arg;	/* null model file.  */
  char * anchor_arg;	/* hmm=results are hmm-ancored (default), seq=results are sequence anchored.  */
  int labeloutput_flag;	/* output will print predicted labeling and posterior label probabilities (default=off).  */
  int alignmentoutput_flag;	/* output will print log likelihood, log odds and reversi scores (default=off).  */
  char * msascoring_arg;	/* scoring method for alignment and profile data options = DP/DPPI/GM/GMR/DPPI/PI/PIS default=GM.  */
  char * usecolumns_arg;	/* specify which columns to use for alignment input data, options = all/nr, where all means use all columns
and nr specifies a sequence in the alignment and the columns where this sequence have non-gap symbls are used
default = all.  */
  int nolabels_flag;	/* do not use labels even though the input sequences are labeled (default=off).  */
  int verbose_flag;	/* print some information about what is going on (default=off).  */
  int max_d_flag;	/* Retrain model on each sequence using Baum-Welch before scoring (default=off).  */
  int path_flag;	/* Print most likely statepath (default=off).  */
  int nopostout_flag;	/* no posterior probability information for label scoring (default=off).  */
  int nolabelout_flag;	/* no predicted labeling for label scoring (default=off).  */
  int nollout_flag;	/* no log likelihood score for alignment scoring (default=off).  */
  int nooddsout_flag;	/* no log odds score for alignment scoring (default=off).  */
  int norevout_flag;	/* no reversi score for alignment scoring (default=off).  */
  int alignpostout_flag;	/* print posterior probability information for alignment scoring (default=off).  */
  int alignlabelout_flag;	/* print predicted labeling for alignment scoring (default=off).  */
  int labelllout_flag;	/* print log likelihood score for label scoring (default=off).  */
  int labeloddsout_flag;	/* print log odds score for label scoring (default=off).  */
  int labelrevout_flag;	/* print reversi score for label scoring (default=off).  */

  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int hmmnamefile_given ;	/* Whether hmmnamefile was given.  */
  int seqnamefile_given ;	/* Whether seqnamefile was given.  */
  int seqformat_given ;	/* Whether seqformat was given.  */
  int outpath_given ;	/* Whether outpath was given.  */
  int freqfile_given ;	/* Whether freqfile was given.  */
  int smxfile_given ;	/* Whether smxfile was given.  */
  int replfile_given ;	/* Whether replfile was given.  */
  int priorfile_given ;	/* Whether priorfile was given.  */
  int nullfile_given ;	/* Whether nullfile was given.  */
  int anchor_given ;	/* Whether anchor was given.  */
  int labeloutput_given ;	/* Whether labeloutput was given.  */
  int alignmentoutput_given ;	/* Whether alignmentoutput was given.  */
  int msascoring_given ;	/* Whether msascoring was given.  */
  int usecolumns_given ;	/* Whether usecolumns was given.  */
  int nolabels_given ;	/* Whether nolabels was given.  */
  int verbose_given ;	/* Whether verbose was given.  */
  int viterbi_given ;	/* Whether viterbi was given.  */
  int nbest_given ;	/* Whether nbest was given.  */
  int forward_given ;	/* Whether forward was given.  */
  int max_d_given ;	/* Whether max_d was given.  */
  int path_given ;	/* Whether path was given.  */
  int nopostout_given ;	/* Whether nopostout was given.  */
  int nolabelout_given ;	/* Whether nolabelout was given.  */
  int nollout_given ;	/* Whether nollout was given.  */
  int nooddsout_given ;	/* Whether nooddsout was given.  */
  int norevout_given ;	/* Whether norevout was given.  */
  int alignpostout_given ;	/* Whether alignpostout was given.  */
  int alignlabelout_given ;	/* Whether alignlabelout was given.  */
  int labelllout_given ;	/* Whether labelllout was given.  */
  int labeloddsout_given ;	/* Whether labeloddsout was given.  */
  int labelrevout_given ;	/* Whether labelrevout was given.  */

  int score_algs_group_counter; /* counter for group score_algs */
} ;

int cmdline_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_HMMSEARCH_H */
