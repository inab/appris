.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PRANK 1"
.TH PRANK 1 "2013-04-10" "v.130410" "The Probabilistic Alignment Kit"
.SH "NAME"
prank \- Computes probabilistic multiple sequence alignments
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBprank\fR \fIsequence_file\fR
.PP
\&\fBprank\fR [optional parameters] \-d=\fIsequence_file\fR [optional parameters]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Probabilistic Alignment Kit (\s-1PRANK\s0) is a probabilistic multiple alignment
program for \s-1DNA\s0, codon and amino-acid sequences. It's based on a novel algorithm
that treats insertions correctly and avoids over-estimation of the number of
deletion events.
.PP
In addition, \s-1PRANK\s0 borrows ideas from maximum likelihood methods used in
phylogenetics and correctly takes into account the evolutionary distances
between sequences. Lastly, \s-1PRANK\s0 allows for defining a potential structure for
sequences to be aligned and then, simultaneously with the alignment, predicts
the locations of structural units in the sequences.
.SH "OPTIONS"
.IX Header "OPTIONS"
.Sh "\s-1INPUT/OUTPUT\s0 \s-1PARAMETERS\s0"
.IX Subsection "INPUT/OUTPUT PARAMETERS"
.IP "\fB\-d=\f(BIsequence_file\fB\fR" 8
.IX Item "-d=sequence_file"
The input sequence file in \s-1FASTA\s0 format.
.IP "\fB\-t=\f(BItree_file\fB\fR" 8
.IX Item "-t=tree_file"
The tree file to use. If unset, an appriximated \s-1NJ\s0 tree is generated.
.IP "\fB\-o=\f(BIoutput_file\fB\fR" 8
.IX Item "-o=output_file"
Set the name of the output file. If unset, \fIoutput_file\fR is set to \fBoutput\fR.
.IP "\fB\-f=\f(BIoutput_format\fB\fR" 8
.IX Item "-f=output_format"
Set the output format. \fIoutput_format\fR can be one of \fBfasta\fR (default),
\&\fBphylipi\fR, \fBphylips\fR, \fBpaml\fR, or \fBnexus\fR.
.IP "\fB\-m=\f(BImodel_file\fB\fR" 8
.IX Item "-m=model_file"
The model file to use. If unset, \fImodel_file\fR is set to \fB\s-1HKY2/WAG\s0\fR.
.IP "\fB\-support\fR" 8
.IX Item "-support"
Compute posterior support.
.IP "\fB\-showxml\fR" 8
.IX Item "-showxml"
Output alignment xml\-file.
.IP "\fB\-showtree\fR" 8
.IX Item "-showtree"
Output alignment guidetree.
.IP "\fB\-showanc\fR" 8
.IX Item "-showanc"
Output ancestral sequences.
.IP "\fB\-showall\fR" 8
.IX Item "-showall"
Output all of these.
.IP "\fB\-noanchors\fR" 8
.IX Item "-noanchors"
Do not use Exonerate anchoring. (Exonerate to be installed separately.)
.IP "\fB\-nomafft\fR" 8
.IX Item "-nomafft"
Do not use \s-1MAFFT\s0 for guide tree. (\s-1MAFFT\s0 to be installed separately.)
.IP "\fB\-njtree\fR" 8
.IX Item "-njtree"
Estimate tree from an input alignment (and realign).
.IP "\fB\-shortnames\fR" 8
.IX Item "-shortnames"
Truncate names at first space character.
.IP "\fB\-quiet\fR" 8
.IX Item "-quiet"
Reduce output.
.Sh "\s-1ALIGNMENT\s0 \s-1MERGE\s0"
.IX Subsection "ALIGNMENT MERGE"
.IP "\fB\-d1=\f(BIalignment_file\fB\fR" 8
.IX Item "-d1=alignment_file"
The first input alignment file in \s-1FASTA\s0 format.
.IP "\fB\-d2=\f(BIalignment_file\fB\fR" 8
.IX Item "-d2=alignment_file"
The second input alignment file in \s-1FASTA\s0 format.
.IP "\fB\-t1=\f(BItree_file\fB\fR" 8
.IX Item "-t1=tree_file"
The tree file for the first alignment. If unset, an appriximated \s-1NJ\s0 tree is generated.
.IP "\fB\-t2=\f(BItree_file\fB\fR" 8
.IX Item "-t2=tree_file"
The tree file for the second alignment. If unset, an appriximated \s-1NJ\s0 tree is generated.
.Sh "\s-1MODEL\s0 \s-1PARAMETERS\s0"
.IX Subsection "MODEL PARAMETERS"
.IP "\fB\-F\fR, \fB+F\fR" 8
.IX Item "-F, +F"
Force insertions to be always skipped.
.IP "\fB\-gaprate=\f(BI#\fB\fR" 8
.IX Item "-gaprate=#"
Set the gap opening rate. The default is \fB0.025\fR for \s-1DNA\s0 and \fB0.005\fR for
proteins.
.IP "\fB\-gapext=\f(BI#\fB\fR" 8
.IX Item "-gapext=#"
Set the gap extension probability. The default is \fB0.75\fR for \s-1DNA\s0 and \fB0.5\fR for
proteins.
.IP "\fB\-codon\fR" 8
.IX Item "-codon"
Use empirical codon model for coding \s-1DNA\s0.
.IP "\fB\-DNA\fR, \fB\-protein\fR" 8
.IX Item "-DNA, -protein"
Use \s-1DNA\s0 or protein model, respectively. Disables auto-detection of model.
.IP "\fB\-termgap\fR" 8
.IX Item "-termgap"
Penalise terminal gaps normally.
.IP "\fB\-nomissing\fR" 8
.IX Item "-nomissing"
No missing data. Use \fB\-F\fR for terminal gaps.
.IP "\fB\-keep\fR" 8
.IX Item "-keep"
Do not remove gaps from pre-aligned sequences.
.Sh "\s-1OTHER\s0 \s-1PARAMETERS\s0"
.IX Subsection "OTHER PARAMETERS"
.IP "\fB\-iterate=#\fR" 8
.IX Item "-iterate=#"
Rounds of re-alignment iteration; by default, iterate five times and keep the best result.
.IP "\fB\-once\fR" 8
.IX Item "-once"
Run only once. Same as \-iterate=1.
.IP "\fB\-prunetree\fR" 8
.IX Item "-prunetree"
Prune guide tree branches with no sequence data.
.IP "\fB\-prunedata\fR" 8
.IX Item "-prunedata"
Prune sequence data with no guide tree leaves.
.IP "\fB\-uselogs\fR" 8
.IX Item "-uselogs"
Slower but should work for a greater number of sequences.
.IP "\fB\-translate\fR" 8
.IX Item "-translate"
Translate input data to protein sequences.
.IP "\fB\-mttranslate\fR" 8
.IX Item "-mttranslate"
Translate input data to protein sequencess using mt table.
.IP "\fB\-convert\fR" 8
.IX Item "-convert"
Do not align, just convert to a different format.
.IP "\fB\-dna=\f(BIdna_sequence_file\fB\fR" 8
.IX Item "-dna=dna_sequence_file"
\&\s-1DNA\s0 sequence file for backtranslation of protein alignment.
.IP "\fB\-help\fR" 8
.IX Item "-help"
Show an extended help page with more options.
.IP "\fB\-version\fR" 8
.IX Item "-version"
Show version and check for updates.
.SH "AUTHORS"
.IX Header "AUTHORS"
\&\fBprank\fR was written by Ari Loytynoja.
.PP
This manual page was originally written by Manuel Prinz <manuel@debian.org> for
the Debian project (and may be used by others).
